{"version":3,"sources":["../src/charmap.json","../src/normalize.js","../src/syllable.js","../src/index.ts","../data/easy_words.ts"],"sourcesContent":["{\"105\":\"i\",\"192\":\"A\",\"193\":\"A\",\"194\":\"A\",\"195\":\"A\",\"196\":\"A\",\"197\":\"A\",\"199\":\"C\",\"200\":\"E\",\"201\":\"E\",\"202\":\"E\",\"203\":\"E\",\"204\":\"I\",\"205\":\"I\",\"206\":\"I\",\"207\":\"I\",\"209\":\"N\",\"210\":\"O\",\"211\":\"O\",\"212\":\"O\",\"213\":\"O\",\"214\":\"O\",\"216\":\"O\",\"217\":\"U\",\"218\":\"U\",\"219\":\"U\",\"220\":\"U\",\"221\":\"Y\",\"224\":\"a\",\"225\":\"a\",\"226\":\"a\",\"227\":\"a\",\"228\":\"a\",\"229\":\"a\",\"231\":\"c\",\"232\":\"e\",\"233\":\"e\",\"234\":\"e\",\"235\":\"e\",\"236\":\"i\",\"237\":\"i\",\"238\":\"i\",\"239\":\"i\",\"241\":\"n\",\"242\":\"o\",\"243\":\"o\",\"244\":\"o\",\"245\":\"o\",\"246\":\"o\",\"248\":\"o\",\"249\":\"u\",\"250\":\"u\",\"251\":\"u\",\"252\":\"u\",\"253\":\"y\",\"255\":\"y\",\"256\":\"A\",\"257\":\"a\",\"258\":\"A\",\"259\":\"a\",\"260\":\"A\",\"261\":\"a\",\"262\":\"C\",\"263\":\"c\",\"264\":\"C\",\"265\":\"c\",\"266\":\"C\",\"267\":\"c\",\"268\":\"C\",\"269\":\"c\",\"270\":\"D\",\"271\":\"d\",\"272\":\"D\",\"273\":\"d\",\"274\":\"E\",\"275\":\"e\",\"276\":\"E\",\"277\":\"e\",\"278\":\"E\",\"279\":\"e\",\"280\":\"E\",\"281\":\"e\",\"282\":\"E\",\"283\":\"e\",\"284\":\"G\",\"285\":\"g\",\"286\":\"G\",\"287\":\"g\",\"288\":\"G\",\"289\":\"g\",\"290\":\"G\",\"291\":\"g\",\"292\":\"H\",\"293\":\"h\",\"294\":\"H\",\"295\":\"h\",\"296\":\"I\",\"297\":\"i\",\"298\":\"I\",\"299\":\"i\",\"300\":\"I\",\"301\":\"i\",\"302\":\"I\",\"303\":\"i\",\"304\":\"I\",\"308\":\"J\",\"309\":\"j\",\"310\":\"K\",\"311\":\"k\",\"313\":\"L\",\"314\":\"l\",\"315\":\"L\",\"316\":\"l\",\"317\":\"L\",\"318\":\"l\",\"319\":\"L\",\"320\":\"l\",\"321\":\"L\",\"322\":\"l\",\"323\":\"N\",\"324\":\"n\",\"325\":\"N\",\"326\":\"n\",\"327\":\"N\",\"328\":\"n\",\"332\":\"O\",\"333\":\"o\",\"334\":\"O\",\"335\":\"o\",\"336\":\"O\",\"337\":\"o\",\"338\":\"O\",\"339\":\"o\",\"340\":\"R\",\"341\":\"r\",\"342\":\"R\",\"343\":\"r\",\"344\":\"R\",\"345\":\"r\",\"346\":\"S\",\"347\":\"s\",\"348\":\"S\",\"349\":\"s\",\"350\":\"S\",\"351\":\"s\",\"352\":\"S\",\"353\":\"s\",\"354\":\"T\",\"355\":\"t\",\"356\":\"T\",\"357\":\"t\",\"358\":\"T\",\"359\":\"t\",\"360\":\"U\",\"361\":\"u\",\"362\":\"U\",\"363\":\"u\",\"364\":\"U\",\"365\":\"u\",\"366\":\"U\",\"367\":\"u\",\"368\":\"U\",\"369\":\"u\",\"370\":\"U\",\"371\":\"u\",\"372\":\"W\",\"373\":\"w\",\"374\":\"Y\",\"375\":\"y\",\"376\":\"Y\",\"377\":\"Z\",\"378\":\"z\",\"379\":\"Z\",\"380\":\"z\",\"381\":\"Z\",\"382\":\"z\",\"384\":\"b\",\"385\":\"B\",\"386\":\"B\",\"387\":\"b\",\"390\":\"O\",\"391\":\"C\",\"392\":\"c\",\"393\":\"D\",\"394\":\"D\",\"395\":\"D\",\"396\":\"d\",\"398\":\"E\",\"400\":\"E\",\"401\":\"F\",\"402\":\"f\",\"403\":\"G\",\"407\":\"I\",\"408\":\"K\",\"409\":\"k\",\"410\":\"l\",\"412\":\"M\",\"413\":\"N\",\"414\":\"n\",\"415\":\"O\",\"416\":\"O\",\"417\":\"o\",\"420\":\"P\",\"421\":\"p\",\"422\":\"R\",\"427\":\"t\",\"428\":\"T\",\"429\":\"t\",\"430\":\"T\",\"431\":\"U\",\"432\":\"u\",\"434\":\"V\",\"435\":\"Y\",\"436\":\"y\",\"437\":\"Z\",\"438\":\"z\",\"461\":\"A\",\"462\":\"a\",\"463\":\"I\",\"464\":\"i\",\"465\":\"O\",\"466\":\"o\",\"467\":\"U\",\"468\":\"u\",\"477\":\"e\",\"484\":\"G\",\"485\":\"g\",\"486\":\"G\",\"487\":\"g\",\"488\":\"K\",\"489\":\"k\",\"490\":\"O\",\"491\":\"o\",\"500\":\"G\",\"501\":\"g\",\"504\":\"N\",\"505\":\"n\",\"512\":\"A\",\"513\":\"a\",\"514\":\"A\",\"515\":\"a\",\"516\":\"E\",\"517\":\"e\",\"518\":\"E\",\"519\":\"e\",\"520\":\"I\",\"521\":\"i\",\"522\":\"I\",\"523\":\"i\",\"524\":\"O\",\"525\":\"o\",\"526\":\"O\",\"527\":\"o\",\"528\":\"R\",\"529\":\"r\",\"530\":\"R\",\"531\":\"r\",\"532\":\"U\",\"533\":\"u\",\"534\":\"U\",\"535\":\"u\",\"536\":\"S\",\"537\":\"s\",\"538\":\"T\",\"539\":\"t\",\"542\":\"H\",\"543\":\"h\",\"544\":\"N\",\"545\":\"d\",\"548\":\"Z\",\"549\":\"z\",\"550\":\"A\",\"551\":\"a\",\"552\":\"E\",\"553\":\"e\",\"558\":\"O\",\"559\":\"o\",\"562\":\"Y\",\"563\":\"y\",\"564\":\"l\",\"565\":\"n\",\"566\":\"t\",\"567\":\"j\",\"570\":\"A\",\"571\":\"C\",\"572\":\"c\",\"573\":\"L\",\"574\":\"T\",\"575\":\"s\",\"576\":\"z\",\"579\":\"B\",\"580\":\"U\",\"581\":\"V\",\"582\":\"E\",\"583\":\"e\",\"584\":\"J\",\"585\":\"j\",\"586\":\"Q\",\"587\":\"q\",\"588\":\"R\",\"589\":\"r\",\"590\":\"Y\",\"591\":\"y\",\"592\":\"a\",\"593\":\"a\",\"595\":\"b\",\"596\":\"o\",\"597\":\"c\",\"598\":\"d\",\"599\":\"d\",\"600\":\"e\",\"603\":\"e\",\"604\":\"e\",\"605\":\"e\",\"606\":\"e\",\"607\":\"j\",\"608\":\"g\",\"609\":\"g\",\"610\":\"g\",\"613\":\"h\",\"614\":\"h\",\"616\":\"i\",\"618\":\"i\",\"619\":\"l\",\"620\":\"l\",\"621\":\"l\",\"623\":\"m\",\"624\":\"m\",\"625\":\"m\",\"626\":\"n\",\"627\":\"n\",\"628\":\"n\",\"629\":\"o\",\"633\":\"r\",\"634\":\"r\",\"635\":\"r\",\"636\":\"r\",\"637\":\"r\",\"638\":\"r\",\"639\":\"r\",\"640\":\"r\",\"641\":\"r\",\"642\":\"s\",\"647\":\"t\",\"648\":\"t\",\"649\":\"u\",\"651\":\"v\",\"652\":\"v\",\"653\":\"w\",\"654\":\"y\",\"655\":\"y\",\"656\":\"z\",\"657\":\"z\",\"663\":\"c\",\"665\":\"b\",\"666\":\"e\",\"667\":\"g\",\"668\":\"h\",\"669\":\"j\",\"670\":\"k\",\"671\":\"l\",\"672\":\"q\",\"686\":\"h\",\"688\":\"h\",\"690\":\"j\",\"691\":\"r\",\"692\":\"r\",\"694\":\"r\",\"695\":\"w\",\"696\":\"y\",\"737\":\"l\",\"738\":\"s\",\"739\":\"x\",\"780\":\"v\",\"829\":\"x\",\"851\":\"x\",\"867\":\"a\",\"868\":\"e\",\"869\":\"i\",\"870\":\"o\",\"871\":\"u\",\"872\":\"c\",\"873\":\"d\",\"874\":\"h\",\"875\":\"m\",\"876\":\"r\",\"877\":\"t\",\"878\":\"v\",\"879\":\"x\",\"7424\":\"a\",\"7427\":\"b\",\"7428\":\"c\",\"7429\":\"d\",\"7431\":\"e\",\"7432\":\"e\",\"7433\":\"i\",\"7434\":\"j\",\"7435\":\"k\",\"7436\":\"l\",\"7437\":\"m\",\"7438\":\"n\",\"7439\":\"o\",\"7440\":\"o\",\"7441\":\"o\",\"7442\":\"o\",\"7443\":\"o\",\"7446\":\"o\",\"7447\":\"o\",\"7448\":\"p\",\"7449\":\"r\",\"7450\":\"r\",\"7451\":\"t\",\"7452\":\"u\",\"7453\":\"u\",\"7454\":\"u\",\"7455\":\"m\",\"7456\":\"v\",\"7457\":\"w\",\"7458\":\"z\",\"7522\":\"i\",\"7523\":\"r\",\"7524\":\"u\",\"7525\":\"v\",\"7680\":\"A\",\"7681\":\"a\",\"7682\":\"B\",\"7683\":\"b\",\"7684\":\"B\",\"7685\":\"b\",\"7686\":\"B\",\"7687\":\"b\",\"7690\":\"D\",\"7691\":\"d\",\"7692\":\"D\",\"7693\":\"d\",\"7694\":\"D\",\"7695\":\"d\",\"7696\":\"D\",\"7697\":\"d\",\"7698\":\"D\",\"7699\":\"d\",\"7704\":\"E\",\"7705\":\"e\",\"7706\":\"E\",\"7707\":\"e\",\"7710\":\"F\",\"7711\":\"f\",\"7712\":\"G\",\"7713\":\"g\",\"7714\":\"H\",\"7715\":\"h\",\"7716\":\"H\",\"7717\":\"h\",\"7718\":\"H\",\"7719\":\"h\",\"7720\":\"H\",\"7721\":\"h\",\"7722\":\"H\",\"7723\":\"h\",\"7724\":\"I\",\"7725\":\"i\",\"7728\":\"K\",\"7729\":\"k\",\"7730\":\"K\",\"7731\":\"k\",\"7732\":\"K\",\"7733\":\"k\",\"7734\":\"L\",\"7735\":\"l\",\"7738\":\"L\",\"7739\":\"l\",\"7740\":\"L\",\"7741\":\"l\",\"7742\":\"M\",\"7743\":\"m\",\"7744\":\"M\",\"7745\":\"m\",\"7746\":\"M\",\"7747\":\"m\",\"7748\":\"N\",\"7749\":\"n\",\"7750\":\"N\",\"7751\":\"n\",\"7752\":\"N\",\"7753\":\"n\",\"7754\":\"N\",\"7755\":\"n\",\"7764\":\"P\",\"7765\":\"p\",\"7766\":\"P\",\"7767\":\"p\",\"7768\":\"R\",\"7769\":\"r\",\"7770\":\"R\",\"7771\":\"r\",\"7774\":\"R\",\"7775\":\"r\",\"7776\":\"S\",\"7777\":\"s\",\"7778\":\"S\",\"7779\":\"s\",\"7786\":\"T\",\"7787\":\"t\",\"7788\":\"T\",\"7789\":\"t\",\"7790\":\"T\",\"7791\":\"t\",\"7792\":\"T\",\"7793\":\"t\",\"7794\":\"U\",\"7795\":\"u\",\"7796\":\"U\",\"7797\":\"u\",\"7798\":\"U\",\"7799\":\"u\",\"7804\":\"V\",\"7805\":\"v\",\"7806\":\"V\",\"7807\":\"v\",\"7808\":\"W\",\"7809\":\"w\",\"7810\":\"W\",\"7811\":\"w\",\"7812\":\"W\",\"7813\":\"w\",\"7814\":\"W\",\"7815\":\"w\",\"7816\":\"W\",\"7817\":\"w\",\"7818\":\"X\",\"7819\":\"x\",\"7820\":\"X\",\"7821\":\"x\",\"7822\":\"Y\",\"7823\":\"y\",\"7824\":\"Z\",\"7825\":\"z\",\"7826\":\"Z\",\"7827\":\"z\",\"7828\":\"Z\",\"7829\":\"z\",\"7835\":\"s\",\"7840\":\"A\",\"7841\":\"a\",\"7842\":\"A\",\"7843\":\"a\",\"7864\":\"E\",\"7865\":\"e\",\"7866\":\"E\",\"7867\":\"e\",\"7868\":\"E\",\"7869\":\"e\",\"7880\":\"I\",\"7881\":\"i\",\"7882\":\"I\",\"7883\":\"i\",\"7884\":\"O\",\"7885\":\"o\",\"7886\":\"O\",\"7887\":\"o\",\"7908\":\"U\",\"7909\":\"u\",\"7910\":\"U\",\"7911\":\"u\",\"7922\":\"Y\",\"7923\":\"y\",\"7924\":\"Y\",\"7925\":\"y\",\"7926\":\"Y\",\"7927\":\"y\",\"7928\":\"Y\",\"7929\":\"y\",\"8305\":\"i\",\"8341\":\"h\",\"8342\":\"k\",\"8343\":\"l\",\"8344\":\"m\",\"8345\":\"n\",\"8346\":\"p\",\"8347\":\"s\",\"8348\":\"t\",\"8450\":\"c\",\"8458\":\"g\",\"8459\":\"h\",\"8460\":\"h\",\"8461\":\"h\",\"8464\":\"i\",\"8465\":\"i\",\"8466\":\"l\",\"8467\":\"l\",\"8468\":\"l\",\"8469\":\"n\",\"8472\":\"p\",\"8473\":\"p\",\"8474\":\"q\",\"8475\":\"r\",\"8476\":\"r\",\"8477\":\"r\",\"8484\":\"z\",\"8488\":\"z\",\"8492\":\"b\",\"8493\":\"c\",\"8495\":\"e\",\"8496\":\"e\",\"8497\":\"f\",\"8498\":\"F\",\"8499\":\"m\",\"8500\":\"o\",\"8506\":\"q\",\"8513\":\"g\",\"8514\":\"l\",\"8515\":\"l\",\"8516\":\"y\",\"8517\":\"d\",\"8518\":\"d\",\"8519\":\"e\",\"8520\":\"i\",\"8521\":\"j\",\"8526\":\"f\",\"8579\":\"C\",\"8580\":\"c\",\"8765\":\"s\",\"8766\":\"s\",\"8959\":\"z\",\"8999\":\"x\",\"9746\":\"x\",\"9776\":\"i\",\"9866\":\"i\",\"10005\":\"x\",\"10006\":\"x\",\"10007\":\"x\",\"10008\":\"x\",\"10625\":\"z\",\"10626\":\"z\",\"11362\":\"L\",\"11364\":\"R\",\"11365\":\"a\",\"11366\":\"t\",\"11373\":\"A\",\"11374\":\"M\",\"11375\":\"A\",\"11390\":\"S\",\"11391\":\"Z\",\"19904\":\"i\",\"42893\":\"H\",\"42922\":\"H\",\"42923\":\"E\",\"42924\":\"G\",\"42925\":\"L\",\"42928\":\"K\",\"42929\":\"T\",\"62937\":\"x\"}","var charmap = require('./charmap.json');\n\nfunction normalize(str, custom_charmap) {\n  var current_charmap = custom_charmap || charmap;\n  var regex = buildRegExp(current_charmap);\n\n  return str.replace(regex, function (charToReplace) {\n    return charmap[charToReplace.charCodeAt(0)] || charToReplace;\n  });\n}\n\nfunction buildRegExp(charmap) {\n  return new RegExp('[' + Object.keys(charmap).map(function (code) { return String.fromCharCode(code); }).join(' ') + ']', 'g');\n}\n\nmodule.exports = normalize;","const pluralize = require('pluralize')\nconst normalize = require('./normalize')\nconst problematic = {\n    abalone: 4,\n    abare: 3,\n    abbruzzese: 4,\n    abed: 2,\n    aborigine: 5,\n    abruzzese: 4,\n    acreage: 3,\n    adame: 3,\n    adieu: 2,\n    adobe: 3,\n    anemone: 4,\n    anyone: 3,\n    apache: 3,\n    aphrodite: 4,\n    apostrophe: 4,\n    ariadne: 4,\n    cafe: 2,\n    calliope: 4,\n    catastrophe: 4,\n    chile: 2,\n    chloe: 2,\n    circe: 2,\n    coyote: 3,\n    daphne: 2,\n    epitome: 4,\n    eurydice: 4,\n    euterpe: 3,\n    every: 2,\n    everywhere: 3,\n    forever: 3,\n    gethsemane: 4,\n    guacamole: 4,\n    hermione: 4,\n    hyperbole: 4,\n    jesse: 2,\n    jukebox: 2,\n    karate: 3,\n    machete: 3,\n    maybe: 2,\n    naive: 2,\n    newlywed: 3,\n    penelope: 4,\n    people: 2,\n    persephone: 4,\n    phoebe: 2,\n    pulse: 1,\n    queue: 1,\n    recipe: 3,\n    riverbed: 3,\n    sesame: 3,\n    shoreline: 2,\n    simile: 3,\n    snuffleupagus: 5,\n    sometimes: 2,\n    syncope: 3,\n    tamale: 3,\n    waterbed: 3,\n    wednesday: 2,\n    yosemite: 4,\n    zoe: 2\n}\n\n\nconst own = {}.hasOwnProperty\n\n// Two expressions of occurrences which normally would be counted as two\n// syllables, but should be counted as one.\nconst EXPRESSION_MONOSYLLABIC_ONE = new RegExp(\n    [\n        'awe($|d|so)',\n        'cia(?:l|$)',\n        'tia',\n        'cius',\n        'cious',\n        '[^aeiou]giu',\n        '[aeiouy][^aeiouy]ion',\n        'iou',\n        'sia$',\n        'eous$',\n        '[oa]gue$',\n        '.[^aeiuoycgltdb]{2,}ed$',\n        '.ely$',\n        '^jua',\n        'uai',\n        'eau',\n        '^busi$',\n        '(?:[aeiouy](?:' +\n        [\n            '[bcfgklmnprsvwxyz]',\n            'ch',\n            'dg',\n            'g[hn]',\n            'lch',\n            'l[lv]',\n            'mm',\n            'nch',\n            'n[cgn]',\n            'r[bcnsv]',\n            'squ',\n            's[chkls]',\n            'th'\n        ].join('|') +\n        ')ed$)',\n        '(?:[aeiouy](?:' +\n        [\n            '[bdfklmnprstvy]',\n            'ch',\n            'g[hn]',\n            'lch',\n            'l[lv]',\n            'mm',\n            'nch',\n            'nn',\n            'r[nsv]',\n            'squ',\n            's[cklst]',\n            'th'\n        ].join('|') +\n        ')es$)'\n    ].join('|'),\n    'g'\n)\n\nconst EXPRESSION_MONOSYLLABIC_TWO = new RegExp(\n    '[aeiouy](?:' +\n    [\n        '[bcdfgklmnprstvyz]',\n        'ch',\n        'dg',\n        'g[hn]',\n        'l[lv]',\n        'mm',\n        'n[cgns]',\n        'r[cnsv]',\n        'squ',\n        's[cklst]',\n        'th'\n    ].join('|') +\n    ')e$',\n    'g'\n)\n\n// Four expression of occurrences which normally would be counted as one\n// syllable, but should be counted as two.\nconst EXPRESSION_DOUBLE_SYLLABIC_ONE = new RegExp(\n    '(?:' +\n    [\n        '([^aeiouy])\\\\1l',\n        '[^aeiouy]ie(?:r|s?t)',\n        '[aeiouym]bl',\n        'eo',\n        'ism',\n        'asm',\n        'thm',\n        'dnt',\n        'snt',\n        'uity',\n        'dea',\n        'gean',\n        'oa',\n        'ua',\n        'react?',\n        'orbed', // Cancel `'.[^aeiuoycgltdb]{2,}ed$',`\n        'shred', // Cancel `'.[^aeiuoycgltdb]{2,}ed$',`\n        'eings?',\n        '[aeiouy]sh?e[rs]'\n    ].join('|') +\n    ')$',\n    'g'\n)\n\nconst EXPRESSION_DOUBLE_SYLLABIC_TWO = new RegExp(\n    [\n        'creat(?!u)',\n        '[^gq]ua[^auieo]',\n        '[aeiou]{3}',\n        '^(?:ia|mc|coa[dglx].)',\n        '^re(app|es|im|us)',\n        '(th|d)eist'\n    ].join('|'),\n    'g'\n)\n\nconst EXPRESSION_DOUBLE_SYLLABIC_THREE = new RegExp(\n    [\n        '[^aeiou]y[ae]',\n        '[^l]lien',\n        'riet',\n        'dien',\n        'iu',\n        'io',\n        'ii',\n        'uen',\n        '[aeilotu]real',\n        'real[aeilotu]',\n        'iell',\n        'eo[^aeiou]',\n        '[aeiou]y[aeiou]'\n    ].join('|'),\n    'g'\n)\n\nconst EXPRESSION_DOUBLE_SYLLABIC_FOUR = /[^s]ia/\n\n// Expression to match single syllable pre- and suffixes.\nconst EXPRESSION_SINGLE = new RegExp(\n    [\n        '^(?:' +\n        [\n            'un',\n            'fore',\n            'ware',\n            'none?',\n            'out',\n            'post',\n            'sub',\n            'pre',\n            'pro',\n            'dis',\n            'side',\n            'some'\n        ].join('|') +\n        ')',\n        '(?:' +\n        [\n            'ly',\n            'less',\n            'some',\n            'ful',\n            'ers?',\n            'ness',\n            'cians?',\n            'ments?',\n            'ettes?',\n            'villes?',\n            'ships?',\n            'sides?',\n            'ports?',\n            'shires?',\n            '[gnst]ion(?:ed|s)?'\n        ].join('|') +\n        ')$'\n    ].join('|'),\n    'g'\n)\n\n// Expression to match double syllable pre- and suffixes.\nconst EXPRESSION_DOUBLE = new RegExp(\n    [\n        '^' +\n        '(?:' +\n        [\n            'above',\n            'anti',\n            'ante',\n            'counter',\n            'hyper',\n            'afore',\n            'agri',\n            'infra',\n            'intra',\n            'inter',\n            'over',\n            'semi',\n            'ultra',\n            'under',\n            'extra',\n            'dia',\n            'micro',\n            'mega',\n            'kilo',\n            'pico',\n            'nano',\n            'macro',\n            'somer'\n        ].join('|') +\n        ')',\n        '(?:fully|berry|woman|women|edly|union|((?:[bcdfghjklmnpqrstvwxz])|[aeiou])ye?ing)$'\n    ].join('|'),\n    'g'\n)\n\n// Expression to match triple syllable suffixes.\nconst EXPRESSION_TRIPLE = /(creations?|ology|ologist|onomy|onomist)$/g\n\n/**\n * Count syllables in `value`.\n *\n * @param {string} value\n *   Value to check.\n * @returns {number}\n *   Syllables in `value`.\n */\nfunction syllable(value) {\n    const values = normalize(String(value))\n        .toLowerCase()\n        // Remove apostrophes.\n        .replace(/['’]/g, '')\n        // Split on word boundaries.\n        .split(/\\b/g)\n    let index = -1\n    let sum = 0\n\n    while (++index < values.length) {\n        // Remove non-alphabetic characters from a given value.\n        sum += one(values[index].replace(/[^a-z]/g, ''))\n    }\n\n    return sum\n}\nmodule.exports = syllable\n\n/**\n * Get syllables in a word.\n *\n * @param {string} value\n * @returns {number}\n */\nfunction one(value) {\n    let count = 0\n\n    if (value.length === 0) {\n        return count\n    }\n\n    // Return early when possible.\n    if (value.length < 3) {\n        return 1\n    }\n\n    // If `value` is a hard to count, it might be in `problematic`.\n    if (own.call(problematic, value)) {\n        return problematic[value]\n    }\n\n    // Additionally, the singular word might be in `problematic`.\n    const singular = pluralize(value, 1)\n\n    if (own.call(problematic, singular)) {\n        return problematic[singular]\n    }\n\n    const addOne = returnFactory(1)\n    const subtractOne = returnFactory(-1)\n\n    // Count some prefixes and suffixes, and remove their matched ranges.\n    value = value\n        .replace(EXPRESSION_TRIPLE, countFactory(3))\n        .replace(EXPRESSION_DOUBLE, countFactory(2))\n        .replace(EXPRESSION_SINGLE, countFactory(1))\n\n    // Count multiple consonants.\n    const parts = value.split(/[^aeiouy]+/)\n    let index = -1\n\n    while (++index < parts.length) {\n        if (parts[index] !== '') {\n            count++\n        }\n    }\n\n    // Subtract one for occurrences which should be counted as one (but are\n    // counted as two).\n    value\n        .replace(EXPRESSION_MONOSYLLABIC_ONE, subtractOne)\n        .replace(EXPRESSION_MONOSYLLABIC_TWO, subtractOne)\n\n    // Add one for occurrences which should be counted as two (but are counted as\n    // one).\n    value\n        .replace(EXPRESSION_DOUBLE_SYLLABIC_ONE, addOne)\n        .replace(EXPRESSION_DOUBLE_SYLLABIC_TWO, addOne)\n        .replace(EXPRESSION_DOUBLE_SYLLABIC_THREE, addOne)\n        .replace(EXPRESSION_DOUBLE_SYLLABIC_FOUR, addOne)\n\n    // Make sure at least on is returned.\n    return count || 1\n\n    /**\n     * Define scoped counters, to be used in `String#replace()` calls.\n     * The scoped counter removes the matched value from the input.\n     *\n     * @param {number} addition\n     */\n    function countFactory(addition) {\n        return counter\n        /**\n         * @returns {string}\n         */\n        function counter() {\n            count += addition\n            return ''\n        }\n    }\n\n    /**\n     * This scoped counter does not remove the matched value from the input.\n     *\n     * @param {number} addition\n     */\n    function returnFactory(addition) {\n        return returner\n        /**\n         * @param {string} $0\n         * @returns {string}\n         */\n        function returner($0) {\n            count += addition\n            return $0\n        }\n    }\n}\n","import pluralize from 'pluralize';\nimport syllable from './syllable';\n\nimport easyWords from '../data/easy_words';\n\nconst punctuationRE: RegExp = /[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,\\-./:;<=>?@[\\]^_`{|}~]/g;\nconst easyWordSet: Set<string> = new Set(easyWords);\n\ndeclare global {\n    interface Math {\n        copySign(x: number, y: number): number;\n        legacyRound(number: number, points?: number): number;\n    }\n}\n\nMath.copySign = (x: number, y: number): number => {\n    return x * (y / Math.abs(y));\n};\n\nMath.legacyRound = (number: number, points: number = 0): number => {\n    const p: number = 10 ** points;\n    // return float(math.floor((number * p) + math.copysign(0.5, number))) / p\n    return Math.floor((number * p) + Math.copySign(0.5, number)) / p;\n};\n\nclass Readability {\n\n    /**\n     * Returns the grade suffix of the given grade.\n     * @param {number} grade - The grade to get the suffix of.\n     * @returns {string} The grade suffix.\n     */\n    static getGradeSuffix(grade: number): string {\n        grade = Math.floor(grade);\n        // poor function fix this, gives { 22th and 23th grade }\n        const gradeMap: Record<number, string> = {\n            1: 'st',\n            2: 'nd',\n            3: 'rd',\n        };\n        return gradeMap[grade] ? gradeMap[grade] : 'th';\n    }\n\n    /**\n     * Returns the character count of the given text.\n     * @param {string} text - The text to count the characters of.\n     * @param {boolean} [ignoreSpaces=true] - Whether to ignore spaces.\n     * @returns {number} The character count.\n     */\n    charCount(text: string, ignoreSpaces: boolean = true): number {\n        if (ignoreSpaces) text = text.replace(/ /g, '');\n        return text.length;\n    }\n\n    /**\n     * Returns the letter count of the given text.\n     * @param {string} text - The text to count the letters of.\n     * @param {boolean} [ignoreSpaces=true] - Whether to ignore spaces.\n     * @returns {number} The letter count.\n     */\n    letterCount(text: string, ignoreSpaces: boolean = true): number {\n        if (ignoreSpaces) text = text.replace(/ /g, '');\n        return this.removePunctuation(text).length;\n    }\n\n    /**\n     * Removes punctuation from the given text.\n     * @param {string} text - The text to remove punctuation from.\n     * @returns {string} The text without punctuation.\n     */\n    removePunctuation(text: string): string {\n        text = text.replace(punctuationRE, '');\n        return text;\n    }\n\n    /**\n     * Splits the given text into an array of strings.\n     * @param {string} text - The text to split.\n     * @returns {string[]} The split text.\n     */\n    static split(text: string): string[] {\n        // text = text.split(/,| |\\n|\\r/g);\n        // text = text.filter(n => n);\n        return text.split(/,| |\\n|\\r/g).filter(n => n);\n    }\n\n    /**\n     * Calculates the number of words present in the text. Optional removePunctuation specifies whether we need to take punctuation symbols into account while counting lexicons. Default value is true, which removes the punctuation before counting lexicon items.\n     * @param {string} text - The text to count the words of.\n     * @param {boolean} [removePunctuation=true] - Whether to ignore punctuation.\n     * @returns {number} The word count.\n     */\n    lexiconCount(text: string, removePunctuation: boolean = true): number {\n        if (removePunctuation) text = this.removePunctuation(text);\n        // text = text.split(/,| |\\n|\\r/g);\n        // text = text.filter(n => n);\n        return text.split(/,| |\\n|\\r/g).filter(n => n).length;\n    }\n\n    /**\n     * Returns the number of syllables present in the given text.\n     * @param {string} text - The text to count the syllables of.\n     * @param {string} [lang='en-US'] - The language of the text.\n     * @returns {number} The syllable count.\n     */\n    syllableCount(text: string, lang: string = 'en-US'): number {\n        text = text.toLocaleLowerCase(lang);\n        text = this.removePunctuation(text);\n        if (!text) return 0;\n        // eventually replace syllable\n        const count = syllable(text);\n        return count;\n    }\n\n    /**\n     * Returns the number of sentences present in the given text.\n     * @param {string} text - The text to count the sentences of.\n     * @returns {number} The sentence count.\n     */\n    sentenceCount(text: string): number {\n        let ignoreCount: number = 0;\n        let sentences: string[] = text.split(/ *[.?!]['\")\\]]*[ |\\n](?=[A-Z])/g);\n        for (let sentence of sentences) {\n            if (this.lexiconCount(sentence) <= 2) ignoreCount += 1;\n        }\n        const validSentences: number = sentences.length - ignoreCount;\n        return validSentences > 1 ? validSentences : 1;\n    }\n\n    /**\n     * Returns the average sentence length of the given text.\n     * @param {string} text - The text to calculate the average sentence length of.\n     * @returns {number} The average sentence length.\n     */\n    averageSentenceLength(text: string): number {\n        const asl: number = this.lexiconCount(text) / this.sentenceCount(text);\n        const returnVal: number = Math.legacyRound(asl, 1);\n        return !isNaN(returnVal) ? returnVal : 0.0;\n    }\n\n    /**\n     * Returns the average syllable per word of the given text.\n     * @param {string} text - The text to calculate the average syllable per word of.\n     * @returns {number} The average syllable per word.\n     */\n    averageSyllablePerWord(text: string): number {\n        const syllables: number = this.syllableCount(text);\n        const words: number = this.lexiconCount(text);\n        const syllablePerWord: number = syllables / words;\n        const returnVal: number = Math.legacyRound(syllablePerWord, 1);\n        return !isNaN(returnVal) ? returnVal : 0.0;\n    }\n\n    /**\n     * Returns the average character per word of the given text.\n     * @param {string} text - The text to calculate the average character per word of.\n     * @returns {number} The average character per word.\n     */\n    averageCharacterPerWord(text: string): number {\n        const charactersPerWord: number = this.charCount(text) / this.lexiconCount(text);\n        const returnVal: number = Math.legacyRound(charactersPerWord, 2);\n        return !isNaN(returnVal) ? returnVal : 0.0;\n    }\n\n    /**\n     * Returns the average letter per word of the given text.\n     * @param {string} text - The text to calculate the average letter per word of.\n     * @returns {number} The average letter per word.\n     */\n    averageLetterPerWord(text: string): number {\n        const lettersPerWord: number = this.letterCount(text) / this.lexiconCount(text);\n        const returnVal: number = Math.legacyRound(lettersPerWord, 2);\n        return !isNaN(returnVal) ? returnVal : 0.0;\n    }\n\n    /**\n     * Returns the average sentence per word of the given text.\n     * @param {string} text - The text to calculate the average sentence per word of.\n     * @returns {number} The average sentence per word.\n     */\n    averageSentencePerWord(text: string): number {\n        const sentencesPerWord: number = this.sentenceCount(text) / this.lexiconCount(text);\n        const returnVal: number = Math.legacyRound(sentencesPerWord, 2);\n        return !isNaN(returnVal) ? returnVal : 0.0;\n    }\n\n    /**\n     * Returns the Flesch Reading Ease Score.\n     * @param {string} text - The text to calculate the score of.\n     * @returns {number} The Flesch Reading Ease Score.\n     */\n    fleschReadingEase(text: string): number {\n        const sentenceLength: number = this.averageSentenceLength(text);\n        const syllablesPerWord: number = this.averageSyllablePerWord(text);\n        const flesch: number = 206.835 - (1.015 * sentenceLength) - (84.6 * syllablesPerWord);\n        const returnVal: number = Math.legacyRound(flesch, 2);\n        return returnVal;\n    }\n\n    fleschReadingEaseToGrade(score: number): number {\n        if (score < 100 && score >= 90) return 5;\n        else if (score < 90 && score >= 80) return 6;\n        else if (score < 80 && score >= 70) return 7;\n        else if (score < 70 && score >= 60) return 8.5;\n        else if (score < 60 && score >= 50) return 11;\n        else if (score < 50 && score >= 40) return 13; // college\n        else if (score < 40 && score >= 30) return 15;\n        else return 16;\n    }\n    /**\n     * Returns the Flesch-Kincaid Grade of the given text.\n     * @param {string} text - The text to calculate the grade of.\n     * @returns {number} The Flesch-Kincaid Grade.\n     */\n    fleschKincaidGrade(text: string): number {\n        const sentenceLength: number = this.averageSentenceLength(text);\n        const syllablePerWord: number = this.averageSyllablePerWord(text);\n        const flesch: number = 0.39 * sentenceLength + 11.8 * syllablePerWord - 15.59;\n        const returnVal: number = Math.legacyRound(flesch, 1);\n        return returnVal;\n    }\n\n    /**\n     * Returns the polysyllable count of the given text.\n     * @param {string} text - The text to calculate the polysyllable count of.\n     * @returns {number} The polysyllable count.\n     */\n    polySyllableCount(text: string): number {\n        let count: number = 0;\n        let wrds: number = 0;\n        for (let word of Readability.split(text)) {\n            wrds = this.syllableCount(word);\n            if (wrds >= 3) count += 1;\n        }\n        return count;\n    }\n\n    /**\n     * Returns the SMOG index of the given text.\n     * @param {string} text - The text to calculate the SMOG index of.\n     * @returns {number} The SMOG index.\n     */\n    smogIndex(text: string): number {\n        const sentences: number = this.sentenceCount(text);\n        if (sentences >= 3) {\n            const polySyllab: number = this.polySyllableCount(text);\n            const smog: number = 1.043 * (30 * (polySyllab / sentences)) ** 0.5 + 3.1291;\n            const returnVal: number = Math.legacyRound(smog, 1);\n            return !isNaN(returnVal) ? returnVal : 0.0;\n        }\n        return 0.0;\n    }\n\n    /**\n     * Returns the grade level of the text using the Coleman-Liau Formula.\n     * @param {string} text - The text to calculate the grade level of.\n     * @returns {number} The grade level.\n     */\n    colemanLiauIndex(text: string): number {\n        const letters: number = Math.legacyRound(this.averageLetterPerWord(text) * 100, 2);\n        const sentences: number = Math.legacyRound(this.averageSentencePerWord(text) * 100, 2);\n        const coleman: number = 0.058 * letters - 0.296 * sentences - 15.8;\n        return Math.legacyRound(coleman, 2);\n    }\n\n    /**\n     * Returns the ARI (Automated Readability Index) of the given text.\n     * @param {string} text - The text to calculate the ARI of.\n     * @returns {number} The ARI.\n     */\n    automatedReadabilityIndex(text: string): number {\n        const characters: number = this.charCount(text);\n        const words: number = this.lexiconCount(text);\n        const sentences: number = this.sentenceCount(text);\n\n        const averageCharacterPerWord: number = characters / words;\n        const averageWordPerSentence: number = words / sentences;\n        const readability: number = (\n            (4.71 * Math.legacyRound(averageCharacterPerWord, 2)) +\n            (0.5 * Math.legacyRound(averageWordPerSentence, 2)) -\n            21.43\n        );\n        const returnVal: number = Math.legacyRound(readability, 1);\n        return !isNaN(returnVal) ? returnVal : 0.0;\n    }\n\n    /**\n     * Returns the grade level using the Linsear Write Formula.\n     * @param {string} text - The text to calculate the grade level of.\n     * @returns {number} The grade level.\n     */\n    linsearWriteFormula(text: string): number {\n        let easyWord: number = 0;\n        let difficultWord: number = 0;\n        let textList: string[] = Readability.split(text).slice(0, 100);\n\n        for (let word of textList) {\n            if (this.syllableCount(word) < 3) {\n                easyWord += 1;\n            } else {\n                difficultWord += 1;\n            }\n        }\n        text = textList.join(' ');\n        let number: number = (easyWord * 1 + difficultWord * 3) / this.sentenceCount(text);\n        let returnVal: number = number <= 20 ? (number - 2) / 2 : number / 2;\n        returnVal = Math.legacyRound(returnVal, 1);\n        return !isNaN(returnVal) ? returnVal : 0.0;\n    }\n\n    /**\n     * Returns the present tense of the given word.\n     * @param {string} word - The word to get the present tense of.\n     * @returns {string} The present tense.\n     * @example\n     * presentTense('running'); // 'run'\n     * presentTense('swimming'); // 'swim'\n     * presentTense('eating'); // 'eat'\n    */\n    presentTense(word: string): string {\n        // good enough for most long words -- we only care about \"difficult\" words\n        // of two or more syllables anyway.\n        // Doesn't work for words ending in \"e\" that aren't \"easy\"\n        if (word.length < 6)\n            return word;\n        if (word.endsWith('ed')) {\n            if (easyWordSet.has(word.slice(0, -1)))\n                return word.slice(0, -1); // \"easy\" word ending in e\n            else\n                return word.slice(0, -2); // assume we remove \"ed\"\n        }\n        if (word.endsWith('ing')) {\n            const suffixIngToE: string = word.slice(0, -3) + \"e\"; // e.g. forcing -> force\n            if (easyWordSet.has(suffixIngToE))\n                return suffixIngToE;\n            else\n                return word.slice(0, -3);\n        }\n        return word;\n    }\n\n    /**\n     * Returns the number of difficult words in the given text.\n     * @param {string} text - The text to count the difficult words of.\n     * @param {number} [syllableThreshold=2] - The syllable threshold.\n     * @returns {number} The number of difficult words.\n     */\n    difficultWords(text: string, syllableThreshold: number = 2): number {\n        const textList: string[] | null = text.match(/[\\w=‘’]+/g);\n        const diffWordsSet: Set<string> = new Set();\n        if (textList === null)\n            return diffWordsSet.size;\n        for (let word of textList) {\n            const normalized: string = this.presentTense(pluralize(word.toLocaleLowerCase()));\n            // console.log(`difficultWords(${word}): norm=${normalized}, `\n            //             `${this.syllableCount(word)} syllables, easy? ${easyWordSet.has(normalized)}`)\n            if (!easyWordSet.has(normalized) && this.syllableCount(word) >= syllableThreshold) {\n                diffWordsSet.add(word);\n            }\n        }\n        return diffWordsSet.size;\n    }\n\n    /**\n     * Returns the New Dale-Chall Formula score of the given text.\n     * @param {string} text - The text to calculate the score of.\n     * @returns {number} The score.\n     */\n    daleChallReadabilityScore(text: string): number {\n        const wordCount: number = this.lexiconCount(text);\n        const count: number = wordCount - this.difficultWords(text);\n        const per: number = (count / wordCount * 100);\n        if (isNaN(per)) return 0.0;\n        const difficultWords: number = 100 - per;\n        // console.log('difficult words : ', difficultWords)\n        let score: number = (0.1579 * difficultWords) + (0.0496 * this.averageSentenceLength(text));\n        if (difficultWords > 5) score += 3.6365;\n        return Math.legacyRound(score, 2);\n    }\n\n    /**\n     * Returns the grade level using the New Dale-Chall Formula.\n     * @param {string} text - The text to calculate the grade level of.\n     * @returns {number} The grade level.\n     */\n    daleChallToGrade(score: number): number {\n        if (score <= 4.9) return 4;\n        if (score < 5.9) return 5;\n        if (score < 6.9) return 7;\n        if (score < 7.9) return 9;\n        if (score < 8.9) return 11;\n        if (score < 9.9) return 13;\n        else return 16;\n    }\n\n    /**\n     * Returns the FOG index of the given text.\n     * @param {string} text - The text to calculate the FOG index of.\n     * @returns {number} The FOG index.\n     */\n    gunningFog(text: string): number {\n        const perDiffWords: number = (this.difficultWords(text, 3) / this.lexiconCount(text) * 100);\n        const grade: number = 0.4 * (this.averageSentenceLength(text) + perDiffWords);\n        const returnVal: number = Math.legacyRound(grade, 2);\n        return !isNaN(returnVal) ? returnVal : 0.0;\n    }\n\n    /**\n     * Returns the LIX of the given text.\n     * @param {string} text - The text to calculate the LIX of.\n     * @returns {number} The LIX.\n     */\n    lix(text: string): number {\n        const words: string[] = Readability.split(text);\n        const wordsLen: number = words.length;\n        const longWords: number = words.filter(wrd => wrd.length > 6).length;\n        const perLongWords: number = longWords * 100 / wordsLen;\n        const asl: number = this.averageSentenceLength(text);\n        const lix: number = asl + perLongWords;\n        return Math.legacyRound(lix, 2);\n    }\n\n    /**\n     * Returns the RIX of the given text.\n     * @param {string} text - The text to calculate the RIX of.\n     * @returns {number} The RIX.\n     */\n    rix(text: string): number {\n        const words: string[] = Readability.split(text);\n        const longWordsCount: number = words.filter(wrd => wrd.length > 6).length;\n        const sentencesCount: number = this.sentenceCount(text);\n        const rix: number = longWordsCount / sentencesCount;\n        return !isNaN(rix) ? Math.legacyRound(rix, 2) : 0.0;\n    }\n\n    /**\n     * Based upon all the above tests, returns the estimated school grade level required to understand the text.\n     * @param {string} text - The text to calculate the grade level of.\n     * @param {boolean} [float_output=false] - Whether to return the score as a float.\n     * @returns {number|string} The grade level.\n     */\n    textStandard(text: string, floatOutput: boolean | null = null): string | number {\n        const grade: number[] = [];\n        // Appending Flesch Kincaid Grade\n        let lower: number = Math.legacyRound(this.fleschKincaidGrade(text));\n        let upper: number = Math.ceil(this.fleschKincaidGrade(text));\n        grade.push(Math.floor(lower));\n        grade.push(Math.floor(upper));\n\n        let score: number = this.fleschReadingEase(text);\n        let freGrade: number = this.fleschReadingEaseToGrade(score);\n        grade.push(freGrade);\n\n        // console.log('grade till now: \\n', grade)\n\n        lower = Math.legacyRound(this.smogIndex(text));\n        upper = Math.ceil(this.smogIndex(text));\n        grade.push(Math.floor(lower));\n        grade.push(Math.floor(upper));\n\n        // Appending Coleman_Liau_Index\n        lower = Math.legacyRound(this.colemanLiauIndex(text));\n        upper = Math.ceil(this.colemanLiauIndex(text));\n        grade.push(Math.floor(lower));\n        grade.push(Math.floor(upper));\n\n        // Appending Automated_Readability_Index\n        lower = Math.legacyRound(this.automatedReadabilityIndex(text));\n        upper = Math.ceil(this.automatedReadabilityIndex(text));\n        grade.push(Math.floor(lower));\n        grade.push(Math.floor(upper));\n\n        // console.log('grade till now : 2 : \\n', grade)\n\n        // Appending  Dale_Chall_Readability_Score\n        lower = Math.legacyRound(this.daleChallToGrade(this.daleChallReadabilityScore(text)));\n        upper = Math.ceil(this.daleChallToGrade(this.daleChallReadabilityScore(text)));\n        grade.push(Math.floor(lower));\n        grade.push(Math.floor(upper));\n\n        // Appending linsearWriteFormula\n        lower = Math.legacyRound(this.linsearWriteFormula(text));\n        upper = Math.ceil(this.linsearWriteFormula(text));\n        grade.push(Math.floor(lower));\n        grade.push(Math.floor(upper));\n\n        // Appending Gunning Fog Index\n        lower = Math.legacyRound(this.gunningFog(text));\n        upper = Math.ceil(this.gunningFog(text));\n        grade.push(Math.floor(lower));\n        grade.push(Math.floor(upper));\n\n        // d = Counter(grade)\n        // final_grade = d.most_common(1)\n        // score = final_grade[0][0]\n\n        // if float_output:\n        //     return float(score)\n        // else:\n        //     lower_score = int(score) - 1\n        //     upper_score = lower_score + 1\n        //     return \"{}{} and {}{} grade\".format(\n        //         lower_score, get_grade_suffix(lower_score),\n        //         upper_score, get_grade_suffix(upper_score)\n        //     )\n        // Finding the Readability Consensus based upon all the above tests\n        // console.log('grade List: ', grade)\n        const counterMap: [number, number][] = [...new Set(grade)].map(x => [x, grade.filter(y => y === x).length]);\n        const finalGrade: [number, number] = counterMap.reduce((x, y) => y[1] >= x[1] ? y : x);\n        score = finalGrade[0];\n        if (floatOutput) return score;\n        const lowerScore: number = Math.floor(score) - 1;\n        const upperScore: number = lowerScore + 1;\n        return `${lowerScore}${Readability.getGradeSuffix(lowerScore)} and ${upperScore}${Readability.getGradeSuffix(upperScore)} grade`;\n    }\n\n    /**\n     * Returns the median grade level of the given text.\n     * @param {string} text - The text to calculate the median grade level of.\n     * @returns {number} The median grade level.\n     */\n    textMedian(text: string): number {\n        const grade: number[] = [];\n        // Appending Flesch Kincaid Grade\n        grade.push(this.fleschKincaidGrade(text));\n\n        const score: number = this.fleschReadingEase(text);\n        const freGrade: number = this.fleschReadingEaseToGrade(score);\n        grade.push(freGrade);\n\n        grade.push(this.smogIndex(text));\n\n        // Appending Coleman_Liau_Index\n        grade.push(this.colemanLiauIndex(text));\n\n        // Appending Automated_Readability_Index\n        grade.push(this.automatedReadabilityIndex(text));\n\n        // Appending  Dale_Chall_Readability_Score\n        grade.push(this.daleChallToGrade(this.daleChallReadabilityScore(text)));\n\n        // Appending linsearWriteFormula\n        grade.push(this.linsearWriteFormula(text));\n\n        // Appending Gunning Fog Index\n        grade.push(this.gunningFog(text));\n\n        // compute median\n        grade.sort(function (a, b) { return a - b });\n        let half: number = Math.floor(grade.length / 2);\n        if (half & 0x1)\n            return (grade[half - 1] + grade[half]) / 2;\n        else\n            return grade[half];\n    }\n}\n\nconst readability: Readability = new Readability();\nexport = readability;\n","const easyWords: string[] = [\n    \"a\",\n    \"able\",\n    \"aboard\",\n    \"about\",\n    \"above\",\n    \"absent\",\n    \"accept\",\n    \"accident\",\n    \"account\",\n    \"ache\",\n    \"aching\",\n    \"acorn\",\n    \"acre\",\n    \"across\",\n    \"act\",\n    \"acts\",\n    \"add\",\n    \"address\",\n    \"admire\",\n    \"adventure\",\n    \"afar\",\n    \"afraid\",\n    \"after\",\n    \"afternoon\",\n    \"afterward\",\n    \"afterwards\",\n    \"again\",\n    \"against\",\n    \"age\",\n    \"aged\",\n    \"ago\",\n    \"agree\",\n    \"ah\",\n    \"ahead\",\n    \"aid\",\n    \"aim\",\n    \"air\",\n    \"airfield\",\n    \"airplane\",\n    \"airport\",\n    \"airship\",\n    \"airy\",\n    \"alarm\",\n    \"alike\",\n    \"alive\",\n    \"all\",\n    \"alley\",\n    \"alligator\",\n    \"allow\",\n    \"almost\",\n    \"alone\",\n    \"along\",\n    \"aloud\",\n    \"already\",\n    \"also\",\n    \"always\",\n    \"am\",\n    \"america\",\n    \"american\",\n    \"among\",\n    \"amount\",\n    \"an\",\n    \"and\",\n    \"angel\",\n    \"anger\",\n    \"angry\",\n    \"animal\",\n    \"another\",\n    \"answer\",\n    \"ant\",\n    \"any\",\n    \"anybody\",\n    \"anyhow\",\n    \"anyone\",\n    \"anything\",\n    \"anyway\",\n    \"anywhere\",\n    \"apart\",\n    \"apartment\",\n    \"ape\",\n    \"apiece\",\n    \"appear\",\n    \"apple\",\n    \"april\",\n    \"apron\",\n    \"are\",\n    \"aren't\",\n    \"arise\",\n    \"arithmetic\",\n    \"arm\",\n    \"armful\",\n    \"army\",\n    \"arose\",\n    \"around\",\n    \"arrange\",\n    \"arrive\",\n    \"arrived\",\n    \"arrow\",\n    \"art\",\n    \"artist\",\n    \"as\",\n    \"ash\",\n    \"ashes\",\n    \"aside\",\n    \"ask\",\n    \"asleep\",\n    \"at\",\n    \"ate\",\n    \"attack\",\n    \"attend\",\n    \"attention\",\n    \"august\",\n    \"aunt\",\n    \"author\",\n    \"auto\",\n    \"automobile\",\n    \"autumn\",\n    \"avenue\",\n    \"awake\",\n    \"awaken\",\n    \"away\",\n    \"awful\",\n    \"awfully\",\n    \"awhile\",\n    \"ax\",\n    \"axe\",\n    \"baa\",\n    \"babe\",\n    \"babies\",\n    \"back\",\n    \"background\",\n    \"backward\",\n    \"backwards\",\n    \"bacon\",\n    \"bad\",\n    \"badge\",\n    \"badly\",\n    \"bag\",\n    \"bake\",\n    \"baker\",\n    \"bakery\",\n    \"baking\",\n    \"ball\",\n    \"balloon\",\n    \"banana\",\n    \"band\",\n    \"bandage\",\n    \"bang\",\n    \"banjo\",\n    \"bank\",\n    \"banker\",\n    \"bar\",\n    \"barber\",\n    \"bare\",\n    \"barefoot\",\n    \"barely\",\n    \"bark\",\n    \"barn\",\n    \"barrel\",\n    \"base\",\n    \"baseball\",\n    \"basement\",\n    \"basket\",\n    \"bat\",\n    \"batch\",\n    \"bath\",\n    \"bathe\",\n    \"bathing\",\n    \"bathroom\",\n    \"bathtub\",\n    \"battle\",\n    \"battleship\",\n    \"bay\",\n    \"be\",\n    \"beach\",\n    \"bead\",\n    \"beam\",\n    \"bean\",\n    \"bear\",\n    \"beard\",\n    \"beast\",\n    \"beat\",\n    \"beating\",\n    \"beautiful\",\n    \"beautify\",\n    \"beauty\",\n    \"became\",\n    \"because\",\n    \"become\",\n    \"becoming\",\n    \"bed\",\n    \"bedbug\",\n    \"bedroom\",\n    \"bedspread\",\n    \"bedtime\",\n    \"bee\",\n    \"beech\",\n    \"beef\",\n    \"beefsteak\",\n    \"beehive\",\n    \"been\",\n    \"beer\",\n    \"beet\",\n    \"before\",\n    \"beg\",\n    \"began\",\n    \"beggar\",\n    \"begged\",\n    \"begin\",\n    \"beginning\",\n    \"begun\",\n    \"behave\",\n    \"behind\",\n    \"being\",\n    \"believe\",\n    \"bell\",\n    \"belong\",\n    \"below\",\n    \"belt\",\n    \"bench\",\n    \"bend\",\n    \"beneath\",\n    \"bent\",\n    \"berries\",\n    \"berry\",\n    \"beside\",\n    \"besides\",\n    \"best\",\n    \"bet\",\n    \"better\",\n    \"between\",\n    \"bib\",\n    \"bible\",\n    \"bicycle\",\n    \"bid\",\n    \"big\",\n    \"bigger\",\n    \"bill\",\n    \"billboard\",\n    \"bin\",\n    \"bind\",\n    \"bird\",\n    \"birth\",\n    \"birthday\",\n    \"biscuit\",\n    \"bit\",\n    \"bite\",\n    \"biting\",\n    \"bitter\",\n    \"black\",\n    \"blackberry\",\n    \"blackbird\",\n    \"blackboard\",\n    \"blackness\",\n    \"blacksmith\",\n    \"blame\",\n    \"blank\",\n    \"blanket\",\n    \"blast\",\n    \"blaze\",\n    \"bleed\",\n    \"bless\",\n    \"blessing\",\n    \"blew\",\n    \"blind\",\n    \"blindfold\",\n    \"blinds\",\n    \"block\",\n    \"blood\",\n    \"bloom\",\n    \"blossom\",\n    \"blot\",\n    \"blow\",\n    \"blue\",\n    \"blueberry\",\n    \"bluebird\",\n    \"blush\",\n    \"board\",\n    \"boast\",\n    \"boat\",\n    \"bob\",\n    \"bobwhite\",\n    \"bodies\",\n    \"body\",\n    \"boil\",\n    \"boiler\",\n    \"bold\",\n    \"bone\",\n    \"bonnet\",\n    \"boo\",\n    \"book\",\n    \"bookcase\",\n    \"bookkeeper\",\n    \"boom\",\n    \"boot\",\n    \"born\",\n    \"borrow\",\n    \"boss\",\n    \"both\",\n    \"bother\",\n    \"bottle\",\n    \"bottom\",\n    \"bought\",\n    \"bounce\",\n    \"bow\",\n    \"bowl\",\n    \"bow-wow\",\n    \"box\",\n    \"boxcar\",\n    \"boxer\",\n    \"boxes\",\n    \"boy\",\n    \"boyhood\",\n    \"bracelet\",\n    \"brain\",\n    \"brake\",\n    \"bran\",\n    \"branch\",\n    \"brass\",\n    \"brave\",\n    \"bread\",\n    \"break\",\n    \"breakfast\",\n    \"breast\",\n    \"breath\",\n    \"breathe\",\n    \"breeze\",\n    \"brick\",\n    \"bride\",\n    \"bridge\",\n    \"bright\",\n    \"brightness\",\n    \"bring\",\n    \"broad\",\n    \"broadcast\",\n    \"broke\",\n    \"broken\",\n    \"brook\",\n    \"broom\",\n    \"brother\",\n    \"brought\",\n    \"brown\",\n    \"brush\",\n    \"bubble\",\n    \"bucket\",\n    \"buckle\",\n    \"bud\",\n    \"buffalo\",\n    \"bug\",\n    \"buggy\",\n    \"build\",\n    \"building\",\n    \"built\",\n    \"bulb\",\n    \"bull\",\n    \"bullet\",\n    \"bum\",\n    \"bumblebee\",\n    \"bump\",\n    \"bun\",\n    \"bunch\",\n    \"bundle\",\n    \"bunny\",\n    \"burn\",\n    \"burst\",\n    \"bury\",\n    \"bus\",\n    \"bush\",\n    \"bushel\",\n    \"business\",\n    \"busy\",\n    \"but\",\n    \"butcher\",\n    \"butt\",\n    \"butter\",\n    \"buttercup\",\n    \"butterfly\",\n    \"buttermilk\",\n    \"butterscotch\",\n    \"button\",\n    \"buttonhole\",\n    \"buy\",\n    \"buzz\",\n    \"by\",\n    \"bye\",\n    \"cab\",\n    \"cabbage\",\n    \"cabin\",\n    \"cabinet\",\n    \"cackle\",\n    \"cage\",\n    \"cake\",\n    \"calendar\",\n    \"calf\",\n    \"call\",\n    \"caller\",\n    \"calling\",\n    \"came\",\n    \"camel\",\n    \"camp\",\n    \"campfire\",\n    \"can\",\n    \"canal\",\n    \"canary\",\n    \"candle\",\n    \"candlestick\",\n    \"candy\",\n    \"cane\",\n    \"cannon\",\n    \"cannot\",\n    \"canoe\",\n    \"can't\",\n    \"canyon\",\n    \"cap\",\n    \"cape\",\n    \"capital\",\n    \"captain\",\n    \"car\",\n    \"card\",\n    \"cardboard\",\n    \"care\",\n    \"careful\",\n    \"careless\",\n    \"carelessness\",\n    \"carload\",\n    \"carpenter\",\n    \"carpet\",\n    \"carriage\",\n    \"carrot\",\n    \"carry\",\n    \"cart\",\n    \"carve\",\n    \"case\",\n    \"cash\",\n    \"cashier\",\n    \"castle\",\n    \"cat\",\n    \"catbird\",\n    \"catch\",\n    \"catcher\",\n    \"caterpillar\",\n    \"catfish\",\n    \"catsup\",\n    \"cattle\",\n    \"caught\",\n    \"cause\",\n    \"cave\",\n    \"ceiling\",\n    \"cell\",\n    \"cellar\",\n    \"cent\",\n    \"center\",\n    \"cereal\",\n    \"certain\",\n    \"certainly\",\n    \"chain\",\n    \"chair\",\n    \"chalk\",\n    \"champion\",\n    \"chance\",\n    \"change\",\n    \"chap\",\n    \"charge\",\n    \"charm\",\n    \"chart\",\n    \"chase\",\n    \"chatter\",\n    \"cheap\",\n    \"cheat\",\n    \"check\",\n    \"checkers\",\n    \"cheek\",\n    \"cheer\",\n    \"cheese\",\n    \"cherry\",\n    \"chest\",\n    \"chew\",\n    \"chick\",\n    \"chicken\",\n    \"chief\",\n    \"child\",\n    \"childhood\",\n    \"children\",\n    \"chill\",\n    \"chilly\",\n    \"chimney\",\n    \"chin\",\n    \"china\",\n    \"chip\",\n    \"chipmunk\",\n    \"chocolate\",\n    \"choice\",\n    \"choose\",\n    \"chop\",\n    \"chorus\",\n    \"chose\",\n    \"chosen\",\n    \"christen\",\n    \"christmas\",\n    \"church\",\n    \"churn\",\n    \"cigarette\",\n    \"circle\",\n    \"circus\",\n    \"citizen\",\n    \"city\",\n    \"clang\",\n    \"clap\",\n    \"class\",\n    \"classmate\",\n    \"classroom\",\n    \"claw\",\n    \"clay\",\n    \"clean\",\n    \"cleaner\",\n    \"clear\",\n    \"clerk\",\n    \"clever\",\n    \"click\",\n    \"cliff\",\n    \"climb\",\n    \"clip\",\n    \"cloak\",\n    \"clock\",\n    \"close\",\n    \"closet\",\n    \"cloth\",\n    \"clothes\",\n    \"clothing\",\n    \"cloud\",\n    \"cloudy\",\n    \"clover\",\n    \"clown\",\n    \"club\",\n    \"cluck\",\n    \"clump\",\n    \"coach\",\n    \"coal\",\n    \"coast\",\n    \"coat\",\n    \"cob\",\n    \"cobbler\",\n    \"cocoa\",\n    \"coconut\",\n    \"cocoon\",\n    \"cod\",\n    \"codfish\",\n    \"coffee\",\n    \"coffeepot\",\n    \"coin\",\n    \"cold\",\n    \"collar\",\n    \"college\",\n    \"color\",\n    \"colored\",\n    \"colt\",\n    \"column\",\n    \"comb\",\n    \"come\",\n    \"comfort\",\n    \"comic\",\n    \"coming\",\n    \"company\",\n    \"compare\",\n    \"conductor\",\n    \"cone\",\n    \"connect\",\n    \"coo\",\n    \"cook\",\n    \"cooked\",\n    \"cooking\",\n    \"cookie\",\n    \"cookies\",\n    \"cool\",\n    \"cooler\",\n    \"coop\",\n    \"copper\",\n    \"copy\",\n    \"cord\",\n    \"cork\",\n    \"corn\",\n    \"corner\",\n    \"correct\",\n    \"cost\",\n    \"cot\",\n    \"cottage\",\n    \"cotton\",\n    \"couch\",\n    \"cough\",\n    \"could\",\n    \"couldn't\",\n    \"count\",\n    \"counter\",\n    \"country\",\n    \"county\",\n    \"course\",\n    \"court\",\n    \"cousin\",\n    \"cover\",\n    \"cow\",\n    \"coward\",\n    \"cowardly\",\n    \"cowboy\",\n    \"cozy\",\n    \"crab\",\n    \"crack\",\n    \"cracker\",\n    \"cradle\",\n    \"cramps\",\n    \"cranberry\",\n    \"crank\",\n    \"cranky\",\n    \"crash\",\n    \"crawl\",\n    \"crazy\",\n    \"cream\",\n    \"creamy\",\n    \"creek\",\n    \"creep\",\n    \"crept\",\n    \"cried\",\n    \"croak\",\n    \"crook\",\n    \"crooked\",\n    \"crop\",\n    \"cross\",\n    \"crossing\",\n    \"cross-eyed\",\n    \"crow\",\n    \"crowd\",\n    \"crowded\",\n    \"crown\",\n    \"cruel\",\n    \"crumb\",\n    \"crumble\",\n    \"crush\",\n    \"crust\",\n    \"cry\",\n    \"cries\",\n    \"cub\",\n    \"cuff\",\n    \"cup\",\n    \"cuff\",\n    \"cup\",\n    \"cupboard\",\n    \"cupful\",\n    \"cure\",\n    \"curl\",\n    \"curly\",\n    \"curtain\",\n    \"curve\",\n    \"cushion\",\n    \"custard\",\n    \"customer\",\n    \"cut\",\n    \"cute\",\n    \"cutting\",\n    \"dab\",\n    \"dad\",\n    \"daddy\",\n    \"daily\",\n    \"dairy\",\n    \"daisy\",\n    \"dam\",\n    \"damage\",\n    \"dame\",\n    \"damp\",\n    \"dance\",\n    \"dancer\",\n    \"dancing\",\n    \"dandy\",\n    \"danger\",\n    \"dangerous\",\n    \"dare\",\n    \"dark\",\n    \"darkness\",\n    \"darling\",\n    \"darn\",\n    \"dart\",\n    \"dash\",\n    \"date\",\n    \"daughter\",\n    \"dawn\",\n    \"day\",\n    \"daybreak\",\n    \"daytime\",\n    \"dead\",\n    \"deaf\",\n    \"deal\",\n    \"dear\",\n    \"death\",\n    \"december\",\n    \"decide\",\n    \"deck\",\n    \"deed\",\n    \"deep\",\n    \"deer\",\n    \"defeat\",\n    \"defend\",\n    \"defense\",\n    \"delight\",\n    \"den\",\n    \"dentist\",\n    \"depend\",\n    \"deposit\",\n    \"describe\",\n    \"desert\",\n    \"deserve\",\n    \"desire\",\n    \"desk\",\n    \"destroy\",\n    \"devil\",\n    \"dew\",\n    \"diamond\",\n    \"did\",\n    \"didn't\",\n    \"die\",\n    \"died\",\n    \"dies\",\n    \"difference\",\n    \"different\",\n    \"dig\",\n    \"dim\",\n    \"dime\",\n    \"dine\",\n    \"ding-dong\",\n    \"dinner\",\n    \"dip\",\n    \"direct\",\n    \"direction\",\n    \"dirt\",\n    \"dirty\",\n    \"discover\",\n    \"dish\",\n    \"dislike\",\n    \"dismiss\",\n    \"ditch\",\n    \"dive\",\n    \"diver\",\n    \"divide\",\n    \"do\",\n    \"dock\",\n    \"doctor\",\n    \"does\",\n    \"doesn't\",\n    \"dog\",\n    \"doll\",\n    \"dollar\",\n    \"dolly\",\n    \"done\",\n    \"donkey\",\n    \"don't\",\n    \"door\",\n    \"doorbell\",\n    \"doorknob\",\n    \"doorstep\",\n    \"dope\",\n    \"dot\",\n    \"double\",\n    \"dough\",\n    \"dove\",\n    \"down\",\n    \"downstairs\",\n    \"downtown\",\n    \"dozen\",\n    \"drag\",\n    \"drain\",\n    \"drank\",\n    \"draw\",\n    \"drawer\",\n    \"draw\",\n    \"drawing\",\n    \"dream\",\n    \"dress\",\n    \"dresser\",\n    \"dressmaker\",\n    \"drew\",\n    \"dried\",\n    \"drift\",\n    \"drill\",\n    \"drink\",\n    \"drip\",\n    \"drive\",\n    \"driven\",\n    \"driver\",\n    \"drop\",\n    \"drove\",\n    \"drown\",\n    \"drowsy\",\n    \"drub\",\n    \"drum\",\n    \"drunk\",\n    \"dry\",\n    \"duck\",\n    \"due\",\n    \"dug\",\n    \"dull\",\n    \"dumb\",\n    \"dump\",\n    \"during\",\n    \"dust\",\n    \"dusty\",\n    \"duty\",\n    \"dwarf\",\n    \"dwell\",\n    \"dwelt\",\n    \"dying\",\n    \"each\",\n    \"eager\",\n    \"eagle\",\n    \"ear\",\n    \"early\",\n    \"earn\",\n    \"earth\",\n    \"east\",\n    \"eastern\",\n    \"easy\",\n    \"eat\",\n    \"eaten\",\n    \"edge\",\n    \"egg\",\n    \"eh\",\n    \"eight\",\n    \"eighteen\",\n    \"eighth\",\n    \"eighty\",\n    \"either\",\n    \"elbow\",\n    \"elder\",\n    \"eldest\",\n    \"electric\",\n    \"electricity\",\n    \"elephant\",\n    \"eleven\",\n    \"elf\",\n    \"elm\",\n    \"else\",\n    \"elsewhere\",\n    \"empty\",\n    \"end\",\n    \"ending\",\n    \"enemy\",\n    \"engine\",\n    \"engineer\",\n    \"english\",\n    \"enjoy\",\n    \"enough\",\n    \"enter\",\n    \"envelope\",\n    \"equal\",\n    \"erase\",\n    \"eraser\",\n    \"errand\",\n    \"escape\",\n    \"eve\",\n    \"even\",\n    \"evening\",\n    \"ever\",\n    \"every\",\n    \"everybody\",\n    \"everyday\",\n    \"everyone\",\n    \"everything\",\n    \"everywhere\",\n    \"evil\",\n    \"exact\",\n    \"except\",\n    \"exchange\",\n    \"excited\",\n    \"exciting\",\n    \"excuse\",\n    \"exit\",\n    \"expect\",\n    \"explain\",\n    \"extra\",\n    \"eye\",\n    \"eyebrow\",\n    \"fable\",\n    \"face\",\n    \"facing\",\n    \"fact\",\n    \"factory\",\n    \"fail\",\n    \"faint\",\n    \"fair\",\n    \"fairy\",\n    \"faith\",\n    \"fake\",\n    \"fall\",\n    \"false\",\n    \"family\",\n    \"fan\",\n    \"fancy\",\n    \"far\",\n    \"faraway\",\n    \"fare\",\n    \"farmer\",\n    \"farm\",\n    \"farming\",\n    \"far-off\",\n    \"farther\",\n    \"fashion\",\n    \"fast\",\n    \"fasten\",\n    \"fat\",\n    \"father\",\n    \"fault\",\n    \"favor\",\n    \"favorite\",\n    \"fear\",\n    \"feast\",\n    \"feather\",\n    \"february\",\n    \"fed\",\n    \"feed\",\n    \"feel\",\n    \"feet\",\n    \"fell\",\n    \"fellow\",\n    \"felt\",\n    \"fence\",\n    \"fever\",\n    \"few\",\n    \"fib\",\n    \"fiddle\",\n    \"field\",\n    \"fife\",\n    \"fifteen\",\n    \"fifth\",\n    \"fifty\",\n    \"fig\",\n    \"fight\",\n    \"figure\",\n    \"file\",\n    \"fill\",\n    \"film\",\n    \"finally\",\n    \"find\",\n    \"fine\",\n    \"finger\",\n    \"finish\",\n    \"fire\",\n    \"firearm\",\n    \"firecracker\",\n    \"fireplace\",\n    \"fireworks\",\n    \"firing\",\n    \"first\",\n    \"fish\",\n    \"fisherman\",\n    \"fist\",\n    \"fit\",\n    \"fits\",\n    \"five\",\n    \"fix\",\n    \"flag\",\n    \"flake\",\n    \"flame\",\n    \"flap\",\n    \"flash\",\n    \"flashlight\",\n    \"flat\",\n    \"flea\",\n    \"flesh\",\n    \"flew\",\n    \"flies\",\n    \"flight\",\n    \"flip\",\n    \"flip-flop\",\n    \"float\",\n    \"flock\",\n    \"flood\",\n    \"floor\",\n    \"flop\",\n    \"flour\",\n    \"flow\",\n    \"flower\",\n    \"flowery\",\n    \"flutter\",\n    \"fly\",\n    \"foam\",\n    \"fog\",\n    \"foggy\",\n    \"fold\",\n    \"folks\",\n    \"follow\",\n    \"following\",\n    \"fond\",\n    \"food\",\n    \"fool\",\n    \"foolish\",\n    \"foot\",\n    \"football\",\n    \"footprint\",\n    \"for\",\n    \"forehead\",\n    \"forest\",\n    \"forget\",\n    \"forgive\",\n    \"forgot\",\n    \"forgotten\",\n    \"fork\",\n    \"form\",\n    \"fort\",\n    \"forth\",\n    \"fortune\",\n    \"forty\",\n    \"forward\",\n    \"fought\",\n    \"found\",\n    \"fountain\",\n    \"four\",\n    \"fourteen\",\n    \"fourth\",\n    \"fox\",\n    \"frame\",\n    \"free\",\n    \"freedom\",\n    \"freeze\",\n    \"freight\",\n    \"french\",\n    \"fresh\",\n    \"fret\",\n    \"friday\",\n    \"fried\",\n    \"friend\",\n    \"friendly\",\n    \"friendship\",\n    \"frighten\",\n    \"frog\",\n    \"from\",\n    \"front\",\n    \"frost\",\n    \"frown\",\n    \"froze\",\n    \"fruit\",\n    \"fry\",\n    \"fudge\",\n    \"fuel\",\n    \"full\",\n    \"fully\",\n    \"fun\",\n    \"funny\",\n    \"fur\",\n    \"furniture\",\n    \"further\",\n    \"fuzzy\",\n    \"gain\",\n    \"gallon\",\n    \"gallop\",\n    \"game\",\n    \"gang\",\n    \"garage\",\n    \"garbage\",\n    \"garden\",\n    \"gas\",\n    \"gasoline\",\n    \"gate\",\n    \"gather\",\n    \"gave\",\n    \"gay\",\n    \"gear\",\n    \"geese\",\n    \"general\",\n    \"gentle\",\n    \"gentleman\",\n    \"gentlemen\",\n    \"geography\",\n    \"get\",\n    \"getting\",\n    \"giant\",\n    \"gift\",\n    \"gingerbread\",\n    \"girl\",\n    \"give\",\n    \"given\",\n    \"giving\",\n    \"glad\",\n    \"gladly\",\n    \"glance\",\n    \"glass\",\n    \"glasses\",\n    \"gleam\",\n    \"glide\",\n    \"glory\",\n    \"glove\",\n    \"glow\",\n    \"glue\",\n    \"go\",\n    \"going\",\n    \"goes\",\n    \"goal\",\n    \"goat\",\n    \"gobble\",\n    \"god\",\n    \"god\",\n    \"godmother\",\n    \"gold\",\n    \"golden\",\n    \"goldfish\",\n    \"golf\",\n    \"gone\",\n    \"good\",\n    \"goods\",\n    \"goodbye\",\n    \"good-by\",\n    \"goodbye\",\n    \"good-bye\",\n    \"good-looking\",\n    \"goodness\",\n    \"goody\",\n    \"goose\",\n    \"gooseberry\",\n    \"got\",\n    \"govern\",\n    \"government\",\n    \"gown\",\n    \"grab\",\n    \"gracious\",\n    \"grade\",\n    \"grain\",\n    \"grand\",\n    \"grandchild\",\n    \"grandchildren\",\n    \"granddaughter\",\n    \"grandfather\",\n    \"grandma\",\n    \"grandmother\",\n    \"grandpa\",\n    \"grandson\",\n    \"grandstand\",\n    \"grape\",\n    \"grapes\",\n    \"grapefruit\",\n    \"grass\",\n    \"grasshopper\",\n    \"grateful\",\n    \"grave\",\n    \"gravel\",\n    \"graveyard\",\n    \"gravy\",\n    \"gray\",\n    \"graze\",\n    \"grease\",\n    \"great\",\n    \"green\",\n    \"greet\",\n    \"grew\",\n    \"grind\",\n    \"groan\",\n    \"grocery\",\n    \"ground\",\n    \"group\",\n    \"grove\",\n    \"grow\",\n    \"guard\",\n    \"guess\",\n    \"guest\",\n    \"guide\",\n    \"gulf\",\n    \"gum\",\n    \"gun\",\n    \"gunpowder\",\n    \"guy\",\n    \"ha\",\n    \"habit\",\n    \"had\",\n    \"hadn't\",\n    \"hail\",\n    \"hair\",\n    \"haircut\",\n    \"hairpin\",\n    \"half\",\n    \"hall\",\n    \"halt\",\n    \"ham\",\n    \"hammer\",\n    \"hand\",\n    \"handful\",\n    \"handkerchief\",\n    \"handle\",\n    \"handwriting\",\n    \"hang\",\n    \"happen\",\n    \"happily\",\n    \"happiness\",\n    \"happy\",\n    \"harbor\",\n    \"hard\",\n    \"hardly\",\n    \"hardship\",\n    \"hardware\",\n    \"hare\",\n    \"hark\",\n    \"harm\",\n    \"harness\",\n    \"harp\",\n    \"harvest\",\n    \"has\",\n    \"hasn't\",\n    \"haste\",\n    \"hasten\",\n    \"hasty\",\n    \"hat\",\n    \"hatch\",\n    \"hatchet\",\n    \"hate\",\n    \"haul\",\n    \"have\",\n    \"haven't\",\n    \"having\",\n    \"hawk\",\n    \"hay\",\n    \"hayfield\",\n    \"haystack\",\n    \"he\",\n    \"head\",\n    \"headache\",\n    \"heal\",\n    \"health\",\n    \"healthy\",\n    \"heap\",\n    \"hear\",\n    \"hearing\",\n    \"heard\",\n    \"heart\",\n    \"heat\",\n    \"heater\",\n    \"heaven\",\n    \"heavy\",\n    \"he'd\",\n    \"heel\",\n    \"height\",\n    \"held\",\n    \"hell\",\n    \"he'll\",\n    \"hello\",\n    \"helmet\",\n    \"help\",\n    \"helper\",\n    \"helpful\",\n    \"hem\",\n    \"hen\",\n    \"henhouse\",\n    \"her\",\n    \"hers\",\n    \"herd\",\n    \"here\",\n    \"here's\",\n    \"hero\",\n    \"herself\",\n    \"he's\",\n    \"hey\",\n    \"hickory\",\n    \"hid\",\n    \"hidden\",\n    \"hide\",\n    \"high\",\n    \"highway\",\n    \"hill\",\n    \"hillside\",\n    \"hilltop\",\n    \"hilly\",\n    \"him\",\n    \"himself\",\n    \"hind\",\n    \"hint\",\n    \"hip\",\n    \"hire\",\n    \"his\",\n    \"hiss\",\n    \"history\",\n    \"hit\",\n    \"hitch\",\n    \"hive\",\n    \"ho\",\n    \"hoe\",\n    \"hog\",\n    \"hold\",\n    \"holder\",\n    \"hole\",\n    \"holiday\",\n    \"hollow\",\n    \"holy\",\n    \"home\",\n    \"homely\",\n    \"homesick\",\n    \"honest\",\n    \"honey\",\n    \"honeybee\",\n    \"honeymoon\",\n    \"honk\",\n    \"honor\",\n    \"hood\",\n    \"hoof\",\n    \"hook\",\n    \"hoop\",\n    \"hop\",\n    \"hope\",\n    \"hopeful\",\n    \"hopeless\",\n    \"horn\",\n    \"horse\",\n    \"horseback\",\n    \"horseshoe\",\n    \"hose\",\n    \"hospital\",\n    \"host\",\n    \"hot\",\n    \"hotel\",\n    \"hound\",\n    \"hour\",\n    \"house\",\n    \"housetop\",\n    \"housewife\",\n    \"housework\",\n    \"how\",\n    \"however\",\n    \"howl\",\n    \"hug\",\n    \"huge\",\n    \"hum\",\n    \"humble\",\n    \"hump\",\n    \"hundred\",\n    \"hung\",\n    \"hunger\",\n    \"hungry\",\n    \"hunk\",\n    \"hunt\",\n    \"hunter\",\n    \"hurrah\",\n    \"hurried\",\n    \"hurry\",\n    \"hurt\",\n    \"husband\",\n    \"hush\",\n    \"hut\",\n    \"hymn\",\n    \"i\",\n    \"ice\",\n    \"icy\",\n    \"i'd\",\n    \"idea\",\n    \"ideal\",\n    \"if\",\n    \"ill\",\n    \"i'll\",\n    \"i'm\",\n    \"important\",\n    \"impossible\",\n    \"improve\",\n    \"in\",\n    \"inch\",\n    \"inches\",\n    \"income\",\n    \"indeed\",\n    \"indian\",\n    \"indoors\",\n    \"ink\",\n    \"inn\",\n    \"insect\",\n    \"inside\",\n    \"instant\",\n    \"instead\",\n    \"insult\",\n    \"intend\",\n    \"interested\",\n    \"interesting\",\n    \"into\",\n    \"invite\",\n    \"iron\",\n    \"is\",\n    \"island\",\n    \"isn't\",\n    \"it\",\n    \"its\",\n    \"it's\",\n    \"itself\",\n    \"i've\",\n    \"ivory\",\n    \"ivy\",\n    \"jacket\",\n    \"jacks\",\n    \"jail\",\n    \"jam\",\n    \"january\",\n    \"jar\",\n    \"jaw\",\n    \"jay\",\n    \"jelly\",\n    \"jellyfish\",\n    \"jerk\",\n    \"jig\",\n    \"job\",\n    \"jockey\",\n    \"join\",\n    \"joke\",\n    \"joking\",\n    \"jolly\",\n    \"journey\",\n    \"joy\",\n    \"joyful\",\n    \"joyous\",\n    \"judge\",\n    \"jug\",\n    \"juice\",\n    \"juicy\",\n    \"july\",\n    \"jump\",\n    \"june\",\n    \"junior\",\n    \"junk\",\n    \"just\",\n    \"keen\",\n    \"keep\",\n    \"kept\",\n    \"kettle\",\n    \"key\",\n    \"kick\",\n    \"kid\",\n    \"kill\",\n    \"killed\",\n    \"kind\",\n    \"kindly\",\n    \"kindness\",\n    \"king\",\n    \"kingdom\",\n    \"kiss\",\n    \"kitchen\",\n    \"kite\",\n    \"kitten\",\n    \"kitty\",\n    \"knee\",\n    \"kneel\",\n    \"knew\",\n    \"knife\",\n    \"knit\",\n    \"knives\",\n    \"knob\",\n    \"knock\",\n    \"knot\",\n    \"know\",\n    \"known\",\n    \"lace\",\n    \"lad\",\n    \"ladder\",\n    \"ladies\",\n    \"lady\",\n    \"laid\",\n    \"lake\",\n    \"lamb\",\n    \"lame\",\n    \"lamp\",\n    \"land\",\n    \"lane\",\n    \"language\",\n    \"lantern\",\n    \"lap\",\n    \"lard\",\n    \"large\",\n    \"lash\",\n    \"lass\",\n    \"last\",\n    \"late\",\n    \"laugh\",\n    \"laundry\",\n    \"law\",\n    \"lawn\",\n    \"lawyer\",\n    \"lay\",\n    \"lazy\",\n    \"lead\",\n    \"leader\",\n    \"leaf\",\n    \"leak\",\n    \"lean\",\n    \"leap\",\n    \"learn\",\n    \"learned\",\n    \"least\",\n    \"leather\",\n    \"leave\",\n    \"leaving\",\n    \"led\",\n    \"left\",\n    \"leg\",\n    \"lemon\",\n    \"lemonade\",\n    \"lend\",\n    \"length\",\n    \"less\",\n    \"lesson\",\n    \"let\",\n    \"let's\",\n    \"letter\",\n    \"letting\",\n    \"lettuce\",\n    \"level\",\n    \"liberty\",\n    \"library\",\n    \"lice\",\n    \"lick\",\n    \"lid\",\n    \"lie\",\n    \"life\",\n    \"lift\",\n    \"light\",\n    \"lightness\",\n    \"lightning\",\n    \"like\",\n    \"likely\",\n    \"liking\",\n    \"lily\",\n    \"limb\",\n    \"lime\",\n    \"limp\",\n    \"line\",\n    \"linen\",\n    \"lion\",\n    \"lip\",\n    \"list\",\n    \"listen\",\n    \"lit\",\n    \"little\",\n    \"live\",\n    \"lives\",\n    \"lively\",\n    \"liver\",\n    \"living\",\n    \"lizard\",\n    \"load\",\n    \"loaf\",\n    \"loan\",\n    \"loaves\",\n    \"lock\",\n    \"locomotive\",\n    \"log\",\n    \"lone\",\n    \"lonely\",\n    \"lonesome\",\n    \"long\",\n    \"look\",\n    \"lookout\",\n    \"loop\",\n    \"loose\",\n    \"lord\",\n    \"lose\",\n    \"loser\",\n    \"loss\",\n    \"lost\",\n    \"lot\",\n    \"loud\",\n    \"love\",\n    \"lovely\",\n    \"lover\",\n    \"low\",\n    \"luck\",\n    \"lucky\",\n    \"lumber\",\n    \"lump\",\n    \"lunch\",\n    \"lying\",\n    \"machine\",\n    \"machinery\",\n    \"mad\",\n    \"made\",\n    \"magazine\",\n    \"magic\",\n    \"maid\",\n    \"mail\",\n    \"mailbox\",\n    \"mailman\",\n    \"major\",\n    \"make\",\n    \"making\",\n    \"male\",\n    \"mama\",\n    \"mamma\",\n    \"man\",\n    \"manager\",\n    \"mane\",\n    \"manger\",\n    \"many\",\n    \"map\",\n    \"maple\",\n    \"marble\",\n    \"march\",\n    \"march\",\n    \"mare\",\n    \"mark\",\n    \"market\",\n    \"marriage\",\n    \"married\",\n    \"marry\",\n    \"mask\",\n    \"mast\",\n    \"master\",\n    \"mat\",\n    \"match\",\n    \"matter\",\n    \"mattress\",\n    \"may\",\n    \"may\",\n    \"maybe\",\n    \"mayor\",\n    \"maypole\",\n    \"me\",\n    \"meadow\",\n    \"meal\",\n    \"mean\",\n    \"means\",\n    \"meant\",\n    \"measure\",\n    \"meat\",\n    \"medicine\",\n    \"meet\",\n    \"meeting\",\n    \"melt\",\n    \"member\",\n    \"men\",\n    \"mend\",\n    \"meow\",\n    \"merry\",\n    \"mess\",\n    \"message\",\n    \"met\",\n    \"metal\",\n    \"mew\",\n    \"mice\",\n    \"middle\",\n    \"midnight\",\n    \"might\",\n    \"mighty\",\n    \"mile\",\n    \"milk\",\n    \"milkman\",\n    \"mill\",\n    \"miler\",\n    \"million\",\n    \"mind\",\n    \"mine\",\n    \"miner\",\n    \"mint\",\n    \"minute\",\n    \"mirror\",\n    \"mischief\",\n    \"miss\",\n    \"miss\",\n    \"misspell\",\n    \"mistake\",\n    \"misty\",\n    \"mitt\",\n    \"mitten\",\n    \"mix\",\n    \"moment\",\n    \"monday\",\n    \"money\",\n    \"monkey\",\n    \"month\",\n    \"moo\",\n    \"moon\",\n    \"moonlight\",\n    \"moose\",\n    \"mop\",\n    \"more\",\n    \"morning\",\n    \"morrow\",\n    \"moss\",\n    \"most\",\n    \"mostly\",\n    \"mother\",\n    \"motor\",\n    \"mount\",\n    \"mountain\",\n    \"mouse\",\n    \"mouth\",\n    \"move\",\n    \"movie\",\n    \"movies\",\n    \"moving\",\n    \"mow\",\n    \"mr.\",\n    \"mrs.\",\n    \"much\",\n    \"mud\",\n    \"muddy\",\n    \"mug\",\n    \"mule\",\n    \"multiply\",\n    \"murder\",\n    \"music\",\n    \"must\",\n    \"my\",\n    \"myself\",\n    \"nail\",\n    \"name\",\n    \"nap\",\n    \"napkin\",\n    \"narrow\",\n    \"nasty\",\n    \"naughty\",\n    \"navy\",\n    \"near\",\n    \"nearby\",\n    \"nearly\",\n    \"neat\",\n    \"neck\",\n    \"necktie\",\n    \"need\",\n    \"needle\",\n    \"needn't\",\n    \"negro\",\n    \"neighbor\",\n    \"neighborhood\",\n    \"neither\",\n    \"nerve\",\n    \"nest\",\n    \"net\",\n    \"never\",\n    \"nevermore\",\n    \"new\",\n    \"news\",\n    \"newspaper\",\n    \"next\",\n    \"nibble\",\n    \"nice\",\n    \"nickel\",\n    \"night\",\n    \"nightgown\",\n    \"nine\",\n    \"nineteen\",\n    \"ninety\",\n    \"no\",\n    \"nobody\",\n    \"nod\",\n    \"noise\",\n    \"noisy\",\n    \"none\",\n    \"noon\",\n    \"nor\",\n    \"north\",\n    \"northern\",\n    \"nose\",\n    \"not\",\n    \"note\",\n    \"nothing\",\n    \"notice\",\n    \"november\",\n    \"now\",\n    \"nowhere\",\n    \"number\",\n    \"nurse\",\n    \"nut\",\n    \"oak\",\n    \"oar\",\n    \"oatmeal\",\n    \"oats\",\n    \"obey\",\n    \"ocean\",\n    \"o'clock\",\n    \"october\",\n    \"odd\",\n    \"of\",\n    \"off\",\n    \"offer\",\n    \"office\",\n    \"officer\",\n    \"often\",\n    \"oh\",\n    \"oil\",\n    \"old\",\n    \"old-fashioned\",\n    \"on\",\n    \"once\",\n    \"one\",\n    \"onion\",\n    \"only\",\n    \"onward\",\n    \"open\",\n    \"or\",\n    \"orange\",\n    \"orchard\",\n    \"order\",\n    \"ore\",\n    \"organ\",\n    \"other\",\n    \"otherwise\",\n    \"ouch\",\n    \"ought\",\n    \"our\",\n    \"ours\",\n    \"ourselves\",\n    \"out\",\n    \"outdoors\",\n    \"outfit\",\n    \"outlaw\",\n    \"outline\",\n    \"outside\",\n    \"outward\",\n    \"oven\",\n    \"over\",\n    \"overalls\",\n    \"overcoat\",\n    \"overeat\",\n    \"overhead\",\n    \"overhear\",\n    \"overnight\",\n    \"overturn\",\n    \"owe\",\n    \"owing\",\n    \"owl\",\n    \"own\",\n    \"owner\",\n    \"ox\",\n    \"pa\",\n    \"pace\",\n    \"pack\",\n    \"package\",\n    \"pad\",\n    \"page\",\n    \"paid\",\n    \"pail\",\n    \"pain\",\n    \"painful\",\n    \"paint\",\n    \"painter\",\n    \"painting\",\n    \"pair\",\n    \"pal\",\n    \"palace\",\n    \"pale\",\n    \"pan\",\n    \"pancake\",\n    \"pane\",\n    \"pansy\",\n    \"pants\",\n    \"papa\",\n    \"paper\",\n    \"parade\",\n    \"pardon\",\n    \"parent\",\n    \"park\",\n    \"part\",\n    \"partly\",\n    \"partner\",\n    \"party\",\n    \"pass\",\n    \"passenger\",\n    \"past\",\n    \"paste\",\n    \"pasture\",\n    \"pat\",\n    \"patch\",\n    \"path\",\n    \"patter\",\n    \"pave\",\n    \"pavement\",\n    \"paw\",\n    \"pay\",\n    \"payment\",\n    \"pea\",\n    \"peas\",\n    \"peace\",\n    \"peaceful\",\n    \"peach\",\n    \"peaches\",\n    \"peak\",\n    \"peanut\",\n    \"pear\",\n    \"pearl\",\n    \"peck\",\n    \"peek\",\n    \"peel\",\n    \"peep\",\n    \"peg\",\n    \"pen\",\n    \"pencil\",\n    \"penny\",\n    \"people\",\n    \"pepper\",\n    \"peppermint\",\n    \"perfume\",\n    \"perhaps\",\n    \"person\",\n    \"pet\",\n    \"phone\",\n    \"piano\",\n    \"pick\",\n    \"pickle\",\n    \"picnic\",\n    \"picture\",\n    \"pie\",\n    \"piece\",\n    \"pig\",\n    \"pigeon\",\n    \"piggy\",\n    \"pile\",\n    \"pill\",\n    \"pillow\",\n    \"pin\",\n    \"pine\",\n    \"pineapple\",\n    \"pink\",\n    \"pint\",\n    \"pipe\",\n    \"pistol\",\n    \"pit\",\n    \"pitch\",\n    \"pitcher\",\n    \"pity\",\n    \"place\",\n    \"plain\",\n    \"plan\",\n    \"plane\",\n    \"plant\",\n    \"plate\",\n    \"platform\",\n    \"platter\",\n    \"play\",\n    \"player\",\n    \"playground\",\n    \"playhouse\",\n    \"playmate\",\n    \"plaything\",\n    \"pleasant\",\n    \"please\",\n    \"pleasure\",\n    \"plenty\",\n    \"plow\",\n    \"plug\",\n    \"plum\",\n    \"pocket\",\n    \"pocketbook\",\n    \"poem\",\n    \"point\",\n    \"poison\",\n    \"poke\",\n    \"pole\",\n    \"police\",\n    \"policeman\",\n    \"polish\",\n    \"polite\",\n    \"pond\",\n    \"ponies\",\n    \"pony\",\n    \"pool\",\n    \"poor\",\n    \"pop\",\n    \"popcorn\",\n    \"popped\",\n    \"porch\",\n    \"pork\",\n    \"possible\",\n    \"post\",\n    \"postage\",\n    \"postman\",\n    \"pot\",\n    \"potato\",\n    \"potatoes\",\n    \"pound\",\n    \"pour\",\n    \"powder\",\n    \"power\",\n    \"powerful\",\n    \"praise\",\n    \"pray\",\n    \"prayer\",\n    \"prepare\",\n    \"present\",\n    \"pretty\",\n    \"price\",\n    \"prick\",\n    \"prince\",\n    \"princess\",\n    \"print\",\n    \"prison\",\n    \"prize\",\n    \"promise\",\n    \"proper\",\n    \"protect\",\n    \"proud\",\n    \"prove\",\n    \"prune\",\n    \"public\",\n    \"puddle\",\n    \"puff\",\n    \"pull\",\n    \"pump\",\n    \"pumpkin\",\n    \"punch\",\n    \"punish\",\n    \"pup\",\n    \"pupil\",\n    \"puppy\",\n    \"pure\",\n    \"purple\",\n    \"purse\",\n    \"push\",\n    \"puss\",\n    \"pussy\",\n    \"pussycat\",\n    \"put\",\n    \"putting\",\n    \"puzzle\",\n    \"quack\",\n    \"quart\",\n    \"quarter\",\n    \"queen\",\n    \"queer\",\n    \"question\",\n    \"quick\",\n    \"quickly\",\n    \"quiet\",\n    \"quilt\",\n    \"quit\",\n    \"quite\",\n    \"rabbit\",\n    \"race\",\n    \"rack\",\n    \"radio\",\n    \"radish\",\n    \"rag\",\n    \"rail\",\n    \"railroad\",\n    \"railway\",\n    \"rain\",\n    \"rainy\",\n    \"rainbow\",\n    \"raise\",\n    \"raisin\",\n    \"rake\",\n    \"ram\",\n    \"ran\",\n    \"ranch\",\n    \"rang\",\n    \"rap\",\n    \"rapidly\",\n    \"rat\",\n    \"rate\",\n    \"rather\",\n    \"rattle\",\n    \"raw\",\n    \"ray\",\n    \"reach\",\n    \"read\",\n    \"reader\",\n    \"reading\",\n    \"ready\",\n    \"real\",\n    \"really\",\n    \"reap\",\n    \"rear\",\n    \"reason\",\n    \"rebuild\",\n    \"receive\",\n    \"recess\",\n    \"record\",\n    \"red\",\n    \"redbird\",\n    \"redbreast\",\n    \"refuse\",\n    \"reindeer\",\n    \"rejoice\",\n    \"remain\",\n    \"remember\",\n    \"remind\",\n    \"remove\",\n    \"rent\",\n    \"repair\",\n    \"repay\",\n    \"repeat\",\n    \"report\",\n    \"rest\",\n    \"return\",\n    \"review\",\n    \"reward\",\n    \"rib\",\n    \"ribbon\",\n    \"rice\",\n    \"rich\",\n    \"rid\",\n    \"riddle\",\n    \"ride\",\n    \"rider\",\n    \"riding\",\n    \"right\",\n    \"rim\",\n    \"ring\",\n    \"rip\",\n    \"ripe\",\n    \"rise\",\n    \"rising\",\n    \"river\",\n    \"road\",\n    \"roadside\",\n    \"roar\",\n    \"roast\",\n    \"rob\",\n    \"robber\",\n    \"robe\",\n    \"robin\",\n    \"rock\",\n    \"rocky\",\n    \"rocket\",\n    \"rode\",\n    \"roll\",\n    \"roller\",\n    \"roof\",\n    \"room\",\n    \"rooster\",\n    \"root\",\n    \"rope\",\n    \"rose\",\n    \"rosebud\",\n    \"rot\",\n    \"rotten\",\n    \"rough\",\n    \"round\",\n    \"route\",\n    \"row\",\n    \"rowboat\",\n    \"royal\",\n    \"rub\",\n    \"rubbed\",\n    \"rubber\",\n    \"rubbish\",\n    \"rug\",\n    \"rule\",\n    \"ruler\",\n    \"rumble\",\n    \"run\",\n    \"rung\",\n    \"runner\",\n    \"running\",\n    \"rush\",\n    \"rust\",\n    \"rusty\",\n    \"rye\",\n    \"sack\",\n    \"sad\",\n    \"saddle\",\n    \"sadness\",\n    \"safe\",\n    \"safety\",\n    \"said\",\n    \"sail\",\n    \"sailboat\",\n    \"sailor\",\n    \"saint\",\n    \"salad\",\n    \"sale\",\n    \"salt\",\n    \"same\",\n    \"sand\",\n    \"sandy\",\n    \"sandwich\",\n    \"sang\",\n    \"sank\",\n    \"sap\",\n    \"sash\",\n    \"sat\",\n    \"satin\",\n    \"satisfactory\",\n    \"saturday\",\n    \"sausage\",\n    \"savage\",\n    \"save\",\n    \"savings\",\n    \"saw\",\n    \"say\",\n    \"scab\",\n    \"scales\",\n    \"scare\",\n    \"scarf\",\n    \"school\",\n    \"schoolboy\",\n    \"schoolhouse\",\n    \"schoolmaster\",\n    \"schoolroom\",\n    \"scorch\",\n    \"score\",\n    \"scrap\",\n    \"scrape\",\n    \"scratch\",\n    \"scream\",\n    \"screen\",\n    \"screw\",\n    \"scrub\",\n    \"sea\",\n    \"seal\",\n    \"seam\",\n    \"search\",\n    \"season\",\n    \"seat\",\n    \"second\",\n    \"secret\",\n    \"see\",\n    \"seeing\",\n    \"seed\",\n    \"seek\",\n    \"seem\",\n    \"seen\",\n    \"seesaw\",\n    \"select\",\n    \"self\",\n    \"selfish\",\n    \"sell\",\n    \"send\",\n    \"sense\",\n    \"sent\",\n    \"sentence\",\n    \"separate\",\n    \"september\",\n    \"servant\",\n    \"serve\",\n    \"service\",\n    \"set\",\n    \"setting\",\n    \"settle\",\n    \"settlement\",\n    \"seven\",\n    \"seventeen\",\n    \"seventh\",\n    \"seventy\",\n    \"several\",\n    \"sew\",\n    \"shade\",\n    \"shadow\",\n    \"shady\",\n    \"shake\",\n    \"shaker\",\n    \"shaking\",\n    \"shall\",\n    \"shame\",\n    \"shan't\",\n    \"shape\",\n    \"share\",\n    \"sharp\",\n    \"shave\",\n    \"she\",\n    \"she'd\",\n    \"she'll\",\n    \"she's\",\n    \"shear\",\n    \"shears\",\n    \"shed\",\n    \"sheep\",\n    \"sheet\",\n    \"shelf\",\n    \"shell\",\n    \"shepherd\",\n    \"shine\",\n    \"shining\",\n    \"shiny\",\n    \"ship\",\n    \"shirt\",\n    \"shock\",\n    \"shoe\",\n    \"shoemaker\",\n    \"shone\",\n    \"shook\",\n    \"shoot\",\n    \"shop\",\n    \"shopping\",\n    \"shore\",\n    \"short\",\n    \"shot\",\n    \"should\",\n    \"shoulder\",\n    \"shouldn't\",\n    \"shout\",\n    \"shovel\",\n    \"show\",\n    \"shower\",\n    \"shut\",\n    \"shy\",\n    \"sick\",\n    \"sickness\",\n    \"side\",\n    \"sidewalk\",\n    \"sideways\",\n    \"sigh\",\n    \"sight\",\n    \"sign\",\n    \"silence\",\n    \"silent\",\n    \"silk\",\n    \"sill\",\n    \"silly\",\n    \"silver\",\n    \"simple\",\n    \"sin\",\n    \"since\",\n    \"sing\",\n    \"singer\",\n    \"single\",\n    \"sink\",\n    \"sip\",\n    \"sir\",\n    \"sis\",\n    \"sissy\",\n    \"sister\",\n    \"sit\",\n    \"sitting\",\n    \"six\",\n    \"sixteen\",\n    \"sixth\",\n    \"sixty\",\n    \"size\",\n    \"skate\",\n    \"skater\",\n    \"ski\",\n    \"skin\",\n    \"skip\",\n    \"skirt\",\n    \"sky\",\n    \"slam\",\n    \"slap\",\n    \"slate\",\n    \"slave\",\n    \"sled\",\n    \"sleep\",\n    \"sleepy\",\n    \"sleeve\",\n    \"sleigh\",\n    \"slept\",\n    \"slice\",\n    \"slid\",\n    \"slide\",\n    \"sling\",\n    \"slip\",\n    \"slipped\",\n    \"slipper\",\n    \"slippery\",\n    \"slit\",\n    \"slow\",\n    \"slowly\",\n    \"sly\",\n    \"smack\",\n    \"small\",\n    \"smart\",\n    \"smell\",\n    \"smile\",\n    \"smoke\",\n    \"smooth\",\n    \"snail\",\n    \"snake\",\n    \"snap\",\n    \"snapping\",\n    \"sneeze\",\n    \"snow\",\n    \"snowy\",\n    \"snowball\",\n    \"snowflake\",\n    \"snuff\",\n    \"snug\",\n    \"so\",\n    \"soak\",\n    \"soap\",\n    \"sob\",\n    \"socks\",\n    \"sod\",\n    \"soda\",\n    \"sofa\",\n    \"soft\",\n    \"soil\",\n    \"sold\",\n    \"soldier\",\n    \"sole\",\n    \"some\",\n    \"somebody\",\n    \"somehow\",\n    \"someone\",\n    \"something\",\n    \"sometime\",\n    \"sometimes\",\n    \"somewhere\",\n    \"son\",\n    \"song\",\n    \"soon\",\n    \"sore\",\n    \"sorrow\",\n    \"sorry\",\n    \"sort\",\n    \"soul\",\n    \"sound\",\n    \"soup\",\n    \"sour\",\n    \"south\",\n    \"southern\",\n    \"space\",\n    \"spade\",\n    \"spank\",\n    \"sparrow\",\n    \"speak\",\n    \"speaker\",\n    \"spear\",\n    \"speech\",\n    \"speed\",\n    \"spell\",\n    \"spelling\",\n    \"spend\",\n    \"spent\",\n    \"spider\",\n    \"spike\",\n    \"spill\",\n    \"spin\",\n    \"spinach\",\n    \"spirit\",\n    \"spit\",\n    \"splash\",\n    \"spoil\",\n    \"spoke\",\n    \"spook\",\n    \"spoon\",\n    \"sport\",\n    \"spot\",\n    \"spread\",\n    \"spring\",\n    \"springtime\",\n    \"sprinkle\",\n    \"square\",\n    \"squash\",\n    \"squeak\",\n    \"squeeze\",\n    \"squirrel\",\n    \"stable\",\n    \"stack\",\n    \"stage\",\n    \"stair\",\n    \"stall\",\n    \"stamp\",\n    \"stand\",\n    \"star\",\n    \"stare\",\n    \"start\",\n    \"starve\",\n    \"state\",\n    \"station\",\n    \"stay\",\n    \"steak\",\n    \"steal\",\n    \"steam\",\n    \"steamboat\",\n    \"steamer\",\n    \"steel\",\n    \"steep\",\n    \"steeple\",\n    \"steer\",\n    \"stem\",\n    \"step\",\n    \"stepping\",\n    \"stick\",\n    \"sticky\",\n    \"stiff\",\n    \"still\",\n    \"stillness\",\n    \"sting\",\n    \"stir\",\n    \"stitch\",\n    \"stock\",\n    \"stocking\",\n    \"stole\",\n    \"stone\",\n    \"stood\",\n    \"stool\",\n    \"stoop\",\n    \"stop\",\n    \"stopped\",\n    \"stopping\",\n    \"store\",\n    \"stork\",\n    \"stories\",\n    \"storm\",\n    \"stormy\",\n    \"story\",\n    \"stove\",\n    \"straight\",\n    \"strange\",\n    \"stranger\",\n    \"strap\",\n    \"straw\",\n    \"strawberry\",\n    \"stream\",\n    \"street\",\n    \"stretch\",\n    \"string\",\n    \"strip\",\n    \"stripes\",\n    \"strong\",\n    \"stuck\",\n    \"study\",\n    \"stuff\",\n    \"stump\",\n    \"stung\",\n    \"subject\",\n    \"such\",\n    \"suck\",\n    \"sudden\",\n    \"suffer\",\n    \"sugar\",\n    \"suit\",\n    \"sum\",\n    \"summer\",\n    \"sun\",\n    \"sunday\",\n    \"sunflower\",\n    \"sung\",\n    \"sunk\",\n    \"sunlight\",\n    \"sunny\",\n    \"sunrise\",\n    \"sunset\",\n    \"sunshine\",\n    \"supper\",\n    \"suppose\",\n    \"sure\",\n    \"surely\",\n    \"surface\",\n    \"surprise\",\n    \"swallow\",\n    \"swam\",\n    \"swamp\",\n    \"swan\",\n    \"swat\",\n    \"swear\",\n    \"sweat\",\n    \"sweater\",\n    \"sweep\",\n    \"sweet\",\n    \"sweetness\",\n    \"sweetheart\",\n    \"swell\",\n    \"swept\",\n    \"swift\",\n    \"swim\",\n    \"swimming\",\n    \"swing\",\n    \"switch\",\n    \"sword\",\n    \"swore\",\n    \"table\",\n    \"tablecloth\",\n    \"tablespoon\",\n    \"tablet\",\n    \"tack\",\n    \"tag\",\n    \"tail\",\n    \"tailor\",\n    \"take\",\n    \"taken\",\n    \"taking\",\n    \"tale\",\n    \"talk\",\n    \"talker\",\n    \"tall\",\n    \"tame\",\n    \"tan\",\n    \"tank\",\n    \"tap\",\n    \"tape\",\n    \"tar\",\n    \"tardy\",\n    \"task\",\n    \"taste\",\n    \"taught\",\n    \"tax\",\n    \"tea\",\n    \"teach\",\n    \"teacher\",\n    \"team\",\n    \"tear\",\n    \"tease\",\n    \"teaspoon\",\n    \"teeth\",\n    \"telephone\",\n    \"tell\",\n    \"temper\",\n    \"ten\",\n    \"tennis\",\n    \"tent\",\n    \"term\",\n    \"terrible\",\n    \"test\",\n    \"than\",\n    \"thank\",\n    \"thanks\",\n    \"thankful\",\n    \"thanksgiving\",\n    \"that\",\n    \"that's\",\n    \"the\",\n    \"theater\",\n    \"thee\",\n    \"their\",\n    \"them\",\n    \"then\",\n    \"there\",\n    \"these\",\n    \"they\",\n    \"they'd\",\n    \"they'll\",\n    \"they're\",\n    \"they've\",\n    \"thick\",\n    \"thief\",\n    \"thimble\",\n    \"thin\",\n    \"thing\",\n    \"think\",\n    \"third\",\n    \"thirsty\",\n    \"thirteen\",\n    \"thirty\",\n    \"this\",\n    \"thorn\",\n    \"those\",\n    \"though\",\n    \"thought\",\n    \"thousand\",\n    \"thread\",\n    \"three\",\n    \"threw\",\n    \"throat\",\n    \"throne\",\n    \"through\",\n    \"throw\",\n    \"thrown\",\n    \"thumb\",\n    \"thunder\",\n    \"thursday\",\n    \"thy\",\n    \"tick\",\n    \"ticket\",\n    \"tickle\",\n    \"tie\",\n    \"tiger\",\n    \"tight\",\n    \"till\",\n    \"time\",\n    \"tin\",\n    \"tinkle\",\n    \"tiny\",\n    \"tip\",\n    \"tiptoe\",\n    \"tire\",\n    \"tired\",\n    \"title\",\n    \"to\",\n    \"toad\",\n    \"toadstool\",\n    \"toast\",\n    \"tobacco\",\n    \"today\",\n    \"toe\",\n    \"together\",\n    \"toilet\",\n    \"told\",\n    \"tomato\",\n    \"tomorrow\",\n    \"ton\",\n    \"tone\",\n    \"tongue\",\n    \"tonight\",\n    \"too\",\n    \"took\",\n    \"tool\",\n    \"toot\",\n    \"tooth\",\n    \"toothbrush\",\n    \"toothpick\",\n    \"top\",\n    \"tore\",\n    \"torn\",\n    \"toss\",\n    \"touch\",\n    \"tow\",\n    \"toward\",\n    \"towards\",\n    \"towel\",\n    \"tower\",\n    \"town\",\n    \"toy\",\n    \"trace\",\n    \"track\",\n    \"trade\",\n    \"train\",\n    \"tramp\",\n    \"trap\",\n    \"tray\",\n    \"treasure\",\n    \"treat\",\n    \"tree\",\n    \"trick\",\n    \"tricycle\",\n    \"tried\",\n    \"trim\",\n    \"trip\",\n    \"trolley\",\n    \"trouble\",\n    \"truck\",\n    \"true\",\n    \"truly\",\n    \"trunk\",\n    \"trust\",\n    \"truth\",\n    \"try\",\n    \"tub\",\n    \"tuesday\",\n    \"tug\",\n    \"tulip\",\n    \"tumble\",\n    \"tune\",\n    \"tunnel\",\n    \"turkey\",\n    \"turn\",\n    \"turtle\",\n    \"twelve\",\n    \"twenty\",\n    \"twice\",\n    \"twig\",\n    \"twin\",\n    \"two\",\n    \"ugly\",\n    \"umbrella\",\n    \"uncle\",\n    \"under\",\n    \"understand\",\n    \"underwear\",\n    \"undress\",\n    \"unfair\",\n    \"unfinished\",\n    \"unfold\",\n    \"unfriendly\",\n    \"unhappy\",\n    \"unhurt\",\n    \"uniform\",\n    \"united\",\n    \"states\",\n    \"unkind\",\n    \"unknown\",\n    \"unless\",\n    \"unpleasant\",\n    \"until\",\n    \"unwilling\",\n    \"up\",\n    \"upon\",\n    \"upper\",\n    \"upset\",\n    \"upside\",\n    \"upstairs\",\n    \"uptown\",\n    \"upward\",\n    \"us\",\n    \"use\",\n    \"used\",\n    \"useful\",\n    \"valentine\",\n    \"valley\",\n    \"valuable\",\n    \"value\",\n    \"vase\",\n    \"vegetable\",\n    \"velvet\",\n    \"very\",\n    \"vessel\",\n    \"victory\",\n    \"view\",\n    \"village\",\n    \"vine\",\n    \"violet\",\n    \"visit\",\n    \"visitor\",\n    \"voice\",\n    \"vote\",\n    \"wag\",\n    \"wagon\",\n    \"waist\",\n    \"wait\",\n    \"wake\",\n    \"waken\",\n    \"walk\",\n    \"wall\",\n    \"walnut\",\n    \"want\",\n    \"war\",\n    \"warm\",\n    \"warn\",\n    \"was\",\n    \"wash\",\n    \"washer\",\n    \"washtub\",\n    \"wasn't\",\n    \"waste\",\n    \"watch\",\n    \"watchman\",\n    \"water\",\n    \"watermelon\",\n    \"waterproof\",\n    \"wave\",\n    \"wax\",\n    \"way\",\n    \"wayside\",\n    \"we\",\n    \"weak\",\n    \"weakness\",\n    \"weaken\",\n    \"wealth\",\n    \"weapon\",\n    \"wear\",\n    \"weary\",\n    \"weather\",\n    \"weave\",\n    \"web\",\n    \"we'd\",\n    \"wedding\",\n    \"wednesday\",\n    \"wee\",\n    \"weed\",\n    \"week\",\n    \"we'll\",\n    \"weep\",\n    \"weigh\",\n    \"welcome\",\n    \"well\",\n    \"went\",\n    \"were\",\n    \"we're\",\n    \"west\",\n    \"western\",\n    \"wet\",\n    \"we've\",\n    \"whale\",\n    \"what\",\n    \"what's\",\n    \"wheat\",\n    \"wheel\",\n    \"when\",\n    \"whenever\",\n    \"where\",\n    \"which\",\n    \"while\",\n    \"whip\",\n    \"whipped\",\n    \"whirl\",\n    \"whisky\",\n    \"whiskey\",\n    \"whisper\",\n    \"whistle\",\n    \"white\",\n    \"who\",\n    \"who'd\",\n    \"whole\",\n    \"who'll\",\n    \"whom\",\n    \"who's\",\n    \"whose\",\n    \"why\",\n    \"wicked\",\n    \"wide\",\n    \"wife\",\n    \"wiggle\",\n    \"wild\",\n    \"wildcat\",\n    \"will\",\n    \"willing\",\n    \"willow\",\n    \"win\",\n    \"wind\",\n    \"windy\",\n    \"windmill\",\n    \"window\",\n    \"wine\",\n    \"wing\",\n    \"wink\",\n    \"winner\",\n    \"winter\",\n    \"wipe\",\n    \"wire\",\n    \"wise\",\n    \"wish\",\n    \"wit\",\n    \"witch\",\n    \"with\",\n    \"without\",\n    \"woke\",\n    \"wolf\",\n    \"woman\",\n    \"women\",\n    \"won\",\n    \"wonder\",\n    \"wonderful\",\n    \"won't\",\n    \"wood\",\n    \"wooden\",\n    \"woodpecker\",\n    \"woods\",\n    \"wool\",\n    \"woolen\",\n    \"word\",\n    \"wore\",\n    \"work\",\n    \"worker\",\n    \"workman\",\n    \"world\",\n    \"worm\",\n    \"worn\",\n    \"worry\",\n    \"worse\",\n    \"worst\",\n    \"worth\",\n    \"would\",\n    \"wouldn't\",\n    \"wound\",\n    \"wove\",\n    \"wrap\",\n    \"wrapped\",\n    \"wreck\",\n    \"wren\",\n    \"wring\",\n    \"write\",\n    \"writing\",\n    \"written\",\n    \"wrong\",\n    \"wrote\",\n    \"wrung\",\n    \"yard\",\n    \"yarn\",\n    \"year\",\n    \"yell\",\n    \"yellow\",\n    \"yes\",\n    \"yesterday\",\n    \"yet\",\n    \"yolk\",\n    \"yonder\",\n    \"you\",\n    \"you'd\",\n    \"you'll\",\n    \"young\",\n    \"youngster\",\n    \"your\",\n    \"yours\",\n    \"you're\",\n    \"yourself\",\n    \"yourselves\",\n    \"youth\",\n    \"you've\",\n]\nexport default easyWords;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,qBAAAA,UAAAC,SAAA;AAAA,IAAAA,QAAA,YAAC,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAA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","names":["exports","module","exports","module","charmap","exports","module","pluralize","syllable","syllable","readability","pluralize"]}